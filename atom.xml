<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wenyu&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tianwenyu.github.io/"/>
  <updated>2018-07-26T09:36:12.955Z</updated>
  <id>https://tianwenyu.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Match-LSTM和Pointer Net</title>
    <link href="https://tianwenyu.github.io/match-LSTM-Pointer-Network/"/>
    <id>https://tianwenyu.github.io/match-LSTM-Pointer-Network/</id>
    <published>2018-04-21T11:29:36.000Z</published>
    <updated>2018-07-26T09:36:12.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Match-LSTM"><a href="#Match-LSTM" class="headerlink" title="Match-LSTM"></a>Match-LSTM</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Match-LSTM是由(Wang &amp; Jiang,2016)发表在NAACL的论文提出，用于解决NLI(Natural Language Inference，文本蕴含)问题。</p><ul><li>premise：前提，代表上下文</li><li>hypothesis：假设，代表一个陈述性的结论<a id="more"></a>文本蕴含问题：给定一个premise（前提），根据这个premise去判断相应的hypothesis（假说）正确与否，如果从这个premise中能够推断出这个hypothesis，那么就判断为entailment（蕴含），否则就是contradiction（矛盾）。</li></ul><h3 id="Word-by-Word-Attention"><a href="#Word-by-Word-Attention" class="headerlink" title="Word-by-Word Attention"></a>Word-by-Word Attention</h3><p>Match-LSTM是在<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1509.06664v4.pdf" target="_blank" rel="external">Rocktaschel et al. (2015)</a>提出的word-by-word attention的基础上进行了改进，先解释一下<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1509.06664v4.pdf" target="_blank" rel="external">Rocktaschel et al. (2015)</a>提出的基本模型</p><p><img src="https://pic2.zhimg.com/80/v2-c68ed27c07068dde4cec33536b7a7483_hd.jpg" alt=""></p><ol><li><p>用LSTM处理premise和hypothesis，(用premise的最后一个输出初始化hypothesis的LSTM)，得到它们的隐层输出。</p><p>其中，</p><ul><li>$h_j^s(1 \le j \le M )$是premise的输入序列经过LSTM之后得到的隐层输出。</li><li>$h_{k}^{t}(1\leq k\leq N)$是hypothesis的隐层输出向量。</li></ul></li><li><p>word-by-word attention的意思是为每个hypothesis中的词引入一个$a<em>k$,用于表示hypothesis，并称这个$a</em>{k}$向量为attention向量，具体公式如下：</p><p><img src="https://pic2.zhimg.com/80/v2-fd900634c4ca508000bc3417510607a7_hd.jpg" alt=""></p><p><img src="https://pic3.zhimg.com/80/v2-56ad976ad61547379fda615ab5d1e48a_hd.jpg" alt=""></p><p>这里的attention权重$a_{kj}$表示hypothesis中第k个词和premise中第j个词之间的关系。</p><p><img src="https://pic1.zhimg.com/80/v2-93d0014aa6014648937ebc8178dc116c_hd.jpg" alt=""></p><p>$h<em>j^s$是premise的隐层输出，$h</em>{k}^{t} $是hypothesis的隐层输出，$h_{k-1}^a$是将输入一个RNN之后得到的隐层状态。</p><p><img src="https://pic3.zhimg.com/80/v2-50376b2b9618bd48be0f0a3cf30a85bc_hd.jpg" alt=""></p></li><li><p>最后利用$h_N^a$和$h_N^t$来预测label：<code>y</code>，即判断premise和hypothesis之间的关系。</p></li></ol><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li><p>用两个LSTM处理premise和hypothesis序列。得到两个隐状态$h^s$和$h^t$(s对应前提，t对应假设)。</p></li><li><p>用下面的公式计算注意力向量$a_k$,这里计算得到的$e$经过归一化和加权求和得到假设$h^t$对前提$h^s$在每个时刻的注意力向量$a_k$</p><p><img src="http://7xpqrs.com1.z0.glb.clouddn.com/FlgZlpVvlxyB5yFCsBr7QxGM8wSr" alt=""></p></li><li><p>上式中$h^m$的计算，用下面的公式计算，其中输入$m_k$是$[a_k,h_k^t]$的拼接。作者把这个结构称为<code>mLSTM</code>，把最后时刻的$h^m$作为输出以预测label。</p><p><img src="http://7xpqrs.com1.z0.glb.clouddn.com/Flel3Uqro1-XL15roShCUDOZkjdN" alt=""></p><p><img src="http://7xpqrs.com1.z0.glb.clouddn.com/FuuDW11Xv4QZGQA0p5Vb73F1rg4T" alt="img"></p><p>​</p></li></ol><h3 id="与Word-to-Word-Attention区别"><a href="#与Word-to-Word-Attention区别" class="headerlink" title="与Word-to-Word Attention区别"></a>与Word-to-Word Attention区别</h3><p><img src="https://pic2.zhimg.com/80/v2-4ffe801c5ac84e0e6df78e2d5d1a3604_hd.jpg" alt=""></p><p>两者的主要区别就是计算$e_{kj}$的不同。</p><ul><li><p>这里用$h^m$代替了$h^a$。</p><ul><li>之前的$h^m$是利用RNN得到的,$h^a$是用mLSTM得到的。</li></ul></li><li><p>为了得到premise跟hypothesis之间的matching关系，用LSTM对它们进行建模，作者认为LSTM能够将premise和hypothesis之间重要的match关系进行保留，忽略不重要的match关系。具体公式如下:</p><p><img src="https://pic4.zhimg.com/80/v2-6f254b9b14818e07b56a3ebe580f5a8e_hd.jpg" alt=""></p><p><img src="https://pic3.zhimg.com/80/v2-3fac4a65dab1694d335b224a7055c3b6_hd.jpg" alt=""></p></li><li><p>最后利用$h_N^m$来预测。</p></li></ul><h2 id="Pointer-Net"><a href="#Pointer-Net" class="headerlink" title="Pointer Net"></a>Pointer Net</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Pointer Network是Vinyals et al.(2015)在NIPS发表的论文中提出的，是为了实现从输入序列中找到相应的tokens来作为输出，其他的阅读理解任务中，可能只需要用输入序列构建一个词典，再从这个候选词典中找到概率最大的一个词作为答案，然而SQuAD数据集的输出答案的长度是变化的，因而无法采用构建词典的方式，而pointer net是利用attention作为pointer，从输入序列中选择一个位置，并将这个位置所指向的词作为输出。对pointer net有兴趣的话，可以参看这个链接进行学习:<a href="https://link.zhihu.com/?target=https%3A//github.com/vshallc/PtrNets" target="_blank" rel="external">Pointer net</a>。AS-Reader、AoA-Reader和R-Net等模型都用了PtrNet作为输出层的结构。</p><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img src="https://pic1.zhimg.com/80/v2-6731208d9422796f5a798d012472401b_hd.jpg" alt=""></p><p>论文中提出了两个模型，且都包含以下三个部分：</p><ul><li>用LSTM对question和passage进行预处理。</li><li>用match-LSTM对question和passage进行match。</li><li>利用Pointer Net从passage中选择tokens作为答案。</li></ul><p>两个模型的区别在于在于第三部分，由于pointer net没有限定所指向的位置必须是连续的，所以第一个模型sequence model直接将答案在passage中出现的位置序号作为答案序列$a=\left( a<em>{1} ,a</em>{2},… \right) $，第二个模型只预测答案的起始位置跟终止位置，即$a=\left(a<em>{s} ,a</em>{e} \right)$。</p><h4 id="LSTM-Preprocessing-Layer"><a href="#LSTM-Preprocessing-Layer" class="headerlink" title="LSTM Preprocessing Layer"></a>LSTM Preprocessing Layer</h4><p>用单向LSTM对passage和question进行预处理。</p><p><img src="https://pic1.zhimg.com/80/v2-271396c88c56d0ad43a7ad7d9640f0c3_hd.jpg" alt=""></p><h4 id="Match-LSTM-Layer"><a href="#Match-LSTM-Layer" class="headerlink" title="Match-LSTM Layer"></a>Match-LSTM Layer</h4><p>这里将question当做premise，将passage当做hypothesis，用标准的word-by-word attention得到attention向量，具体公式如下：</p><p><img src="https://pic1.zhimg.com/80/v2-3e8bac3a6b2d529dfbe82590e4703891_hd.jpg" alt=""></p><p>其中，</p><ul><li><p>$\vec{h}_{i-1}^r \in R^l$是经过单向m-LSTM得到的隐层输出。</p></li><li><p>$\vec{\alpha_{i,j}}$表示passage中的第i个词和question中的第j个词之间的匹配关系。然后用$\overline{\alpha}$对question的隐层输出进行加权，并将其跟passage的隐层输出进行拼接，得到一个新的向量，并输入到m-LSTM中，得到$\bar{H^r}$，具体公式如下：</p><p><img src="https://pic4.zhimg.com/80/v2-ef8069071be26c461f41eafe93af2aaf_hd.jpg" alt=""></p><p><img src="https://pic4.zhimg.com/80/v2-1cf8251dbb311515d91a0cb33fb172d2_hd.jpg" alt=""></p></li></ul><p>再从另一个方向进行相同的处理,将两者进行合并，得到最后的输出向量$H^{r} $</p><p><img src="https://pic1.zhimg.com/80/v2-22189154aed842755d555b82574efd48_hd.jpg" alt=""></p><h4 id="Answer-Pointer-Layer"><a href="#Answer-Pointer-Layer" class="headerlink" title="Answer Pointer Layer"></a>Answer Pointer Layer</h4><h5 id="The-Sequence-Model"><a href="#The-Sequence-Model" class="headerlink" title="The Sequence Model"></a>The Sequence Model</h5><ul><li><p>由于这个模型是生成答案的位置序列$a=(a<em>{1} ,a</em>{2},…)$，每个元素表示的是这个词在passage中位置，其取值范围在1到P+1之间，当出现了P+1时，则答案生成终止。因此在$H^{r}$的最后中加入了一列0向量，用来表示终止词，得到$\bar{H} ^{r} $。</p></li><li><p>这里再次用到了attention方法去得到向量$\beta<em>k \in R^{(P+1)}$,$\beta</em>{k,j}$表示选择passage中的第j个词作为答案序列的第k个词的概率，$\beta_{k,(P+1)}$表示在第k个位置停止答案生成的概率。公式如下：</p><p><img src="https://pic4.zhimg.com/80/v2-2010c06cc5cad2250298cc5b71688894_hd.jpg" alt=""></p><p><img src="https://pic3.zhimg.com/80/v2-931cc26fa9a20fc88235e34d2581c62e_hd.jpg" alt=""></p><p>其中，$h_k^a$也是经过一个LSTM的输出。</p></li><li><p>模型生成答案的概率公式如下：</p><p><img src="https://pic4.zhimg.com/80/v2-9fa21cef108ce36bfc461e926500ab2f_hd.jpg" alt=""></p><p><img src="https://pic4.zhimg.com/80/v2-0e2151f9ed41efec99f58ec9720be311_hd.jpg" alt=""></p></li><li><p>损失函数如下：</p><p><img src="https://pic2.zhimg.com/80/v2-dd3069b97a3681cd81041742f4d65fd3_hd.jpg" alt=""></p></li></ul><h5 id="The-Boundary-Model"><a href="#The-Boundary-Model" class="headerlink" title="The Boundary Model"></a>The Boundary Model</h5><p>因为boundary model只需要生成答案的起始和终止位置，因此不用在<img src="https://www.zhihu.com/equation?tex=H%5E%7Br%7D+" alt="H^{r} ">最后加入一个零向量来表示答案生成结束。生成答案序列的概率模型如下：</p><p><img src="https://pic3.zhimg.com/80/v2-4c644369e011e52315d583b5f90a8a4b_hd.jpg" alt=""></p><p>其余部分与上个模型相同。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Match-LSTM&quot;&gt;&lt;a href=&quot;#Match-LSTM&quot; class=&quot;headerlink&quot; title=&quot;Match-LSTM&quot;&gt;&lt;/a&gt;Match-LSTM&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Match-LSTM是由(Wang &amp;amp; Jiang,2016)发表在NAACL的论文提出，用于解决NLI(Natural Language Inference，文本蕴含)问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;premise：前提，代表上下文&lt;/li&gt;
&lt;li&gt;hypothesis：假设，代表一个陈述性的结论
    
    </summary>
    
      <category term="NLP" scheme="https://tianwenyu.github.io/categories/NLP/"/>
    
    
      <category term="NLP" scheme="https://tianwenyu.github.io/tags/NLP/"/>
    
      <category term="阅读理解" scheme="https://tianwenyu.github.io/tags/%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>任务型多轮对话系统概述</title>
    <link href="https://tianwenyu.github.io/task-oriented-dialog-system/"/>
    <id>https://tianwenyu.github.io/task-oriented-dialog-system/</id>
    <published>2018-04-20T11:29:36.000Z</published>
    <updated>2018-07-26T09:36:24.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要模块"><a href="#主要模块" class="headerlink" title="主要模块"></a>主要模块</h2><p>任务型机器人核心模块主要包括三个模块：</p><ul><li>自然语言理解模块（NLU）</li><li>对话管理模块</li><li>自然语言生成模块（NLG）<a id="more"></a></li></ul><p><img src="https://pic1.zhimg.com/80/v2-b70539cc9a32d7f2711a086f0fbbda4f_hd.jpg" alt="img"></p><h3 id="自然语言理解模块"><a href="#自然语言理解模块" class="headerlink" title="自然语言理解模块"></a>自然语言理解模块</h3><p>该模块一般包含以下三个模块：</p><ul><li>领域识别：即识别该语句是不是属于这个任务场景，一般有多个机器人集成时，如闲聊机器人，问答机器人等，领域识别应当在进入任务型机器人之前做判断与分发</li><li>意图识别：即识别用户意图，细分该任务型场景下的子场景、</li><li>语义槽填充：用于对话管理模块的输入</li></ul><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>假设Text=“人民币对美元的汇率是多少”；经过自然语言理解模块会解析为 act ( slot1 = value1, slot2 = value2 ……) 的形式，即意图，槽位，槽位信息三元组形式，即 Text会解析为“查询（槽位1=人民币，槽位2=美元)”这样的形式。</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="基于规则理解方法"><a href="#基于规则理解方法" class="headerlink" title="基于规则理解方法"></a>基于规则理解方法</h5><p>【优点】</p><ul><li>不需要大量训练数据</li></ul><p>【缺点】</p><ul><li>容易出错</li><li>调整规则费时费力，难以维护</li></ul><h5 id="统计方法（对齐）"><a href="#统计方法（对齐）" class="headerlink" title="统计方法（对齐）"></a>统计方法（对齐）</h5><p>基于词对齐数据的自然语言理解通常被看做一个序列标注问题。主要有以下两类方法：</p><ul><li>基于生成式模型<ul><li>随机有限状态机（FST）</li><li>统计机器翻译（SMT）</li><li>动态贝叶斯网络（DBN）</li></ul></li><li>基于判别式模型<ul><li>CRF</li><li>SVM</li><li>MEMM</li></ul></li></ul><h5 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h5><ul><li>BiLSTM+CRF</li><li>CNN：用于序列标注</li><li>Seq2Seq</li></ul><h3 id="对话管理模块"><a href="#对话管理模块" class="headerlink" title="对话管理模块"></a>对话管理模块</h3><p>自然语言理解模块的三元组输出将作为对话管理系统的输入。它主要包括两部分：</p><ul><li>状态追踪模块</li><li>对话策略模块</li></ul><p>【状态追踪模块】</p><p>该模块在对话的每一轮次对用户的目标进行预估，管理每个回合的输入和对话历史，输出当前对话状态。</p><p><img src="https://pic1.zhimg.com/80/v2-b08e6cd63a89448e47f4576ae3603067_hd.jpg" alt="img"></p><p>【对话策略模块】</p><p>该模块的主要功能是根据前面的对话状态决策采取的最优动作（如：提供结果，询问特定限制条件，澄清或确认需求等）从而最有效的辅助用户完成信息或服务获取的任务。该模块基于用户输入的语义表达和当前对话状态输出下一步的系统行为和更新的对话状态。</p><h4 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h4><p>text=“人民币对美元的汇率是多少”。“查询（槽位1=人民币，槽位2=美元)”这样的形式将作为对话管理模块的输入，这时候状态追踪模块就要根据前几轮的信息，结合该输入判断该轮的查询状态，确定查询的槽位，以及与数据库的交互。如得到想要查询的确实是人民币对美元的汇率信息。这时候，根据现有的对话策略判断当前的槽位状态，最后给出对话管理模块的输出，如查询结果(源货币=人民币，目标货币=美元，汇率=1:0.16)</p><h3 id="自然语言生成模块"><a href="#自然语言生成模块" class="headerlink" title="自然语言生成模块"></a>自然语言生成模块</h3><p>该模块主要任务是将对话策略输出的语义表达生成流畅可读的自然语言句子，反馈给用户。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主要模块&quot;&gt;&lt;a href=&quot;#主要模块&quot; class=&quot;headerlink&quot; title=&quot;主要模块&quot;&gt;&lt;/a&gt;主要模块&lt;/h2&gt;&lt;p&gt;任务型机器人核心模块主要包括三个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自然语言理解模块（NLU）&lt;/li&gt;
&lt;li&gt;对话管理模块&lt;/li&gt;
&lt;li&gt;自然语言生成模块（NLG）
    
    </summary>
    
      <category term="NLP" scheme="https://tianwenyu.github.io/categories/NLP/"/>
    
    
      <category term="NLP" scheme="https://tianwenyu.github.io/tags/NLP/"/>
    
      <category term="多轮对话" scheme="https://tianwenyu.github.io/tags/%E5%A4%9A%E8%BD%AE%E5%AF%B9%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装python3</title>
    <link href="https://tianwenyu.github.io/centos-install-python/"/>
    <id>https://tianwenyu.github.io/centos-install-python/</id>
    <published>2018-04-01T11:29:36.000Z</published>
    <updated>2018-04-14T13:27:22.576Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>下载安装包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -xvJf Python-3.6.2.tar.xz</span><br></pre></td></tr></table></figure></li><li><p>进入到解压后的<code>Python-3.6.2</code>文件夹</p></li><li><p>编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./configure --prefix=xxxx</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>【注】<code>prefix</code>后是<code>Python-3.6.2</code>的解压路径的父目录</p></li><li><p>添加软连接到执行目录<code>/usr/bin</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s xxx/bin/python3 /usr/bin/python3</span><br><span class="line">ln -s xxx/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure><p>【注】<code>xxx</code>代表python的安装路径，即步骤四的<code>prefix</code>后的路径</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载安装包&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo wget https://www.python.org/ft
      
    
    </summary>
    
      <category term="Linux" scheme="https://tianwenyu.github.io/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="https://tianwenyu.github.io/tags/CentOS/"/>
    
      <category term="Linux" scheme="https://tianwenyu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>无Root权限中Ubuntu安装Python</title>
    <link href="https://tianwenyu.github.io/no-root-install-python/"/>
    <id>https://tianwenyu.github.io/no-root-install-python/</id>
    <published>2018-03-18T11:29:36.000Z</published>
    <updated>2018-07-26T09:37:57.697Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>下载Python</p><p><code>wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tar.xz</code></p></li><li><p>解压</p><p><code>tar -xvf Python-3.6.3.tar.zx</code></p></li><li><p>进入到解压后的文件夹</p><p><code>cd Python-3.6.3</code></p></li><li><p><code>./configure --prefix=&#39;Your Install Director&#39;</code></p></li><li><p><code>make &amp;&amp; make install</code></p></li><li><p>添加路径,编辑<code>~/.bashrc</code></p><p><code>vim ~/.bashrc</code></p></li><li><p>在文件最后添加</p><p><code>export PATH=/Your Install Path:$PATH</code>，如<code>export PATH=/usr/local/bin/:$PATH</code></p></li><li><p>创建别名，编辑<code>~/.bashrc</code></p><p><code>vim ~/.bashrc</code></p></li><li><p>在文件最后添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> python=<span class="string">'Your python path'</span></span><br><span class="line"><span class="built_in">alias</span> pip=<span class="string">'Your pip path'</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载Python&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tar.xz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解压&lt;/p&gt;
&lt;p&gt;&lt;code&gt;t
      
    
    </summary>
    
      <category term="Linux" scheme="https://tianwenyu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://tianwenyu.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://tianwenyu.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>安装Docker CE for Windows后VirtualBox无法启动问题解决</title>
    <link href="https://tianwenyu.github.io/docker-virtualbox-problem/"/>
    <id>https://tianwenyu.github.io/docker-virtualbox-problem/</id>
    <published>2018-03-10T11:29:36.000Z</published>
    <updated>2018-03-12T08:08:48.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在Windows上运行Docker需要借助虚拟机来运行一个简化的Linux系统，Docker CE for Windows使用的是Windows系统自带的<code>Hyper-V</code>（从Win8开始）虚拟机组件。</p><p>因此在安装Docker CE for Windows时，会打开<code>Hyper-V</code>组件（默认是关闭的），会和Virtual Box冲突。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="关闭Hyper-V组件"><a href="#关闭Hyper-V组件" class="headerlink" title="关闭Hyper-V组件"></a>关闭<code>Hyper-V</code>组件</h3><p><code>控制面板-程序和功能-启用或关闭Windows功能</code>，去掉<code>Hpyer-V</code>功能。重启。</p><p><img src="http://img.blog.csdn.net/20171127124402922" alt="img"></p><p>打开Virtualbox依然报错</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180312/EkIhhCAAbd.png?imageslim" alt="mark"></p><p>这是因为<code>vboxdrv</code>服务没有安装或成功启动，在Virtualbox安装目录下的<code>drivers\vobxdrv</code>文件夹下，右击<code>VBoxDrv.inf</code>，选择安装，然后重启。</p><p>如果还是失败，则直接重新安装即可。</p><h2 id="安装老版Docker-Toolbox"><a href="#安装老版Docker-Toolbox" class="headerlink" title="安装老版Docker Toolbox"></a>安装老版Docker Toolbox</h2><p>老版Docker Toolbox使用的时Virtualbox虚拟机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;在Windows上运行Docker需要借助虚拟机来运行一个简化的Linux系统，Docker CE for Windows使用的是Windo
      
    
    </summary>
    
      <category term="运维技术" scheme="https://tianwenyu.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Windows" scheme="https://tianwenyu.github.io/tags/Windows/"/>
    
      <category term="Docker" scheme="https://tianwenyu.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Windows10下Docker简明教程</title>
    <link href="https://tianwenyu.github.io/windows-docker/"/>
    <id>https://tianwenyu.github.io/windows-docker/</id>
    <published>2018-03-01T11:29:36.000Z</published>
    <updated>2018-03-12T07:23:26.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、<a href="http://www.whatis.com.cn/word_5275.htm" target="_blank" rel="external">bare metal</a>、OpenStack 集群和其他的基础应用平台。 </p><p>Docker通常用于如下场景：</p><ul><li>web应用的自动化打包和发布；</li><li>自动化测试和持续集成、发布；</li><li>在服务型环境中部署和调整数据库或其他的后台应用；</li><li>从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。</li></ul><a id="more"></a><h3 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h3><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180305/Cg78lC6082.png?imageslim" alt="mark"></p><p>Docker使用C/S架构模式，Docker客户端会与Docker守护进程通信。Docker守护进程会处理复杂繁重的任务，例如建立、运行、发布你的 Docker 容器。Docker 客户端和守护进程可以运行在同一个系统上，当然你也可以使用 Docker 客户端去连接一个远程的 Docker 守护进程。Docker 客户端和守护进程之间通过 socket 或者 RESTful API 进行通信。</p><p>Docker分为三种部件：</p><ul><li>Docker镜像-Docker Images</li><li>Docker容器-Docker Containers</li><li>Docker仓库-Docker Registeries</li></ul><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>Docker运行容器前需要本地存在对应的镜像。Docker镜像可以用来创建Docker容器，一个镜像可以包含一个完整的操作系统环境和用户需要的其他应用程序。</p><p>Docker镜像是只可读的，一个镜像可以创建多个容器。</p><p>通俗说，Images是已经打包好的环境文件，我们运行的时候把Images加载运行在本地容器中，你在这个容器中可以进行一些修改重新打包成新镜像上传。</p><h4 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h4><p>因为镜像包含操作系统完整的root文件系统，其体积往往是巨大的，因此Docker设计时，就充分利用Union FS技术，将其设计为分层存储的架构。</p><p>分层存储的特征使得镜像并非像一个ISO类似的打包文件，而是由一组文件系统组成。</p><h3 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h3><p>Docker利用容器来开发、运行应用。容器是镜像创建的实例，可以被开始、启动、停止、删除。每个容器都是相互隔离的。</p><h3 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h3><p>仓库是集中存放镜像文件的场所。每个仓库中包含了多个镜像，每个镜像有不同的标签。</p><p>最大的公开仓库是<a href="[https://**hub**.**docker**.com/](http://www.baidu.com/link?url=XXjI7ksUwIGyOeeGLj18zm9wnXFolGgd4ZTPbEZ65zamM5dwMUF9m7lS930XC8z4">DockerHub</a>)，因为墙的原因，可以使用<a href="http://get.daocloud.io/" target="_blank" rel="external">DaoCloud</a>、<a href="[https://j0andt2p.mirror.aliyuncs.com](https://j0andt2p.mirror.aliyuncs.com/">阿里云</a>)加速下载。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>Win10版本Docker安装以下版本<a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe" target="_blank" rel="external">Docker Community Edition 17.12.0-ce</a></li><li>Win10之前版本安装<a href="https://download.docker.com/win/stable/DockerToolbox.exe" target="_blank" rel="external">Docker ToolBox</a>，<a href="https://docs.docker.com/toolbox/overview/#whats-in-the-box" target="_blank" rel="external">官方文档</a></li></ul><ol><li><p>安装之前，需要开启Windows10的<code>Hpyer-V</code>。</p><p><code>控制面板-程序-启用或关闭Windows功能</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180305/G8GkJmK19j.png?imageslim" alt="mark"></p></li></ol><ol><li><p>本文以<code>Docker Community Edition</code>为例，开启<code>Hpyer-V</code>后直接安装<code>Docker Community Edition</code>即可。</p><p>安装成功后，运行<code>cmd</code>,执行<code>docker version</code>，安装成功则显示下图</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180305/kGIA8d4j2f.png?imageslim" alt="mark"></p></li></ol><h2 id="设置Docker"><a href="#设置Docker" class="headerlink" title="设置Docker"></a>设置Docker</h2><p><code>任务栏鲸鱼图标右键-Settings</code>打开设置界面</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180306/m2dbjkDeKm.png?imageslim" alt="mark"></p><ul><li><code>Shared Drivers</code>：可以将主机（即Windows）中的驱动器共享到Docker Container中</li><li><code>Advanced</code>：用于配置运行Docker Daemon的虚拟机环境的CPU和内存和镜像路径</li><li><code>Network</code>：配置Docker的网络环境</li><li><code>Proxies</code>：代理的配置</li><li><code>Docker Daemon</code>：使用JSON格式的设置，对Docker Daemon进行设置，类似于在Linux中利用conf文件对Docker设置。</li></ul><h3 id="修改CPU数目及内存"><a href="#修改CPU数目及内存" class="headerlink" title="修改CPU数目及内存"></a>修改CPU数目及内存</h3><p>点击<code>Advanced</code>，如下图修改参数即可</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180305/7LH2Hkgika.png?imageslim" alt="mark"></p><h3 id="修改代理"><a href="#修改代理" class="headerlink" title="修改代理"></a>修改代理</h3><p><code>Docker Hub</code>速度较慢，修改为阿里云镜像。</p><p>登陆<a href="https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fcr.console.aliyun.com%2F%3Fspm%3Da2c4e.11153959.blogcont29941.9.520269d6tguzRb" target="_blank" rel="external">容器Hub服务</a>，找到以下链接</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180307/0kJ3JeB7fI.png?imageslim" alt="mark"></p><p>点击<code>Daemon</code>设置镜像，直接在<code>Registry mirrors</code>中填写阿里云的镜像地址，点击<code>Apply</code>重启应用即可。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180307/BH74glgG0L.png?imageslim" alt="mark"></p><h3 id="更改镜像默认存储路径"><a href="#更改镜像默认存储路径" class="headerlink" title="更改镜像默认存储路径"></a>更改镜像默认存储路径</h3><p>打开Docker的<code>Settings</code>，点击<code>Advanced</code>，在<code>Images and volumes VHD location</code>选择新的路径。重启后即可更新设置。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180306/32EJFIc6bB.png?imageslim" alt="mark"></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="查看Docker版本"><a href="#查看Docker版本" class="headerlink" title="查看Docker版本"></a>查看Docker版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h3 id="查看本机已安装镜像"><a href="#查看本机已安装镜像" class="headerlink" title="查看本机已安装镜像"></a>查看本机已安装镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull Name:Tag</span><br></pre></td></tr></table></figure><p>【例】</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull sameersbn/redmine:latest</span><br></pre></td></tr></table></figure><h3 id="删除单个容器"><a href="#删除单个容器" class="headerlink" title="删除单个容器"></a>删除单个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm Name/ID</span><br></pre></td></tr></table></figure><h3 id="删除所有的容器"><a href="#删除所有的容器" class="headerlink" title="删除所有的容器"></a>删除所有的容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm docker ps -a -q</span><br></pre></td></tr></table></figure><h3 id="停止、启动、杀死一个容器"><a href="#停止、启动、杀死一个容器" class="headerlink" title="停止、启动、杀死一个容器"></a>停止、启动、杀死一个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop Name/ID</span><br><span class="line">docker start Name/ID</span><br><span class="line">docker <span class="built_in">kill</span> Name/ID</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/xiaoping0915/article/details/75094857" target="_blank" rel="external">【Docker】windows10 docker 使用</a></li><li><a href="http://blog.csdn.net/sb19931201/article/details/53838339" target="_blank" rel="external">Docker on Windows初体验</a></li><li><a href="https://www.cnblogs.com/daxnet/p/5788972.html" target="_blank" rel="external">Docker for Windows使用简介</a></li><li><a href="https://yq.aliyun.com/articles/62375" target="_blank" rel="external">Docker的Windows容器初体验</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、&lt;a href=&quot;http://www.whatis.com.cn/word_5275.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bare metal&lt;/a&gt;、OpenStack 集群和其他的基础应用平台。 &lt;/p&gt;
&lt;p&gt;Docker通常用于如下场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web应用的自动化打包和发布；&lt;/li&gt;
&lt;li&gt;自动化测试和持续集成、发布；&lt;/li&gt;
&lt;li&gt;在服务型环境中部署和调整数据库或其他的后台应用；&lt;/li&gt;
&lt;li&gt;从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="运维技术" scheme="https://tianwenyu.github.io/categories/%E8%BF%90%E7%BB%B4%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Windows" scheme="https://tianwenyu.github.io/tags/Windows/"/>
    
      <category term="Docker" scheme="https://tianwenyu.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Windows10下Docker搭建深度学习框架</title>
    <link href="https://tianwenyu.github.io/docker-deeplearning/"/>
    <id>https://tianwenyu.github.io/docker-deeplearning/</id>
    <published>2018-03-01T11:29:36.000Z</published>
    <updated>2018-03-07T12:12:28.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h2 id="Deepo"><a href="#Deepo" class="headerlink" title="Deepo"></a>Deepo</h2><p><code>Deepo</code>是一个几乎包含所有流行深度学习框架的Docker映像，拥有一个完整的可复制的深度学习研究环境。它涵盖了</p><ul><li>theano</li><li>tensorflow</li><li>sonnet</li><li>pytorch</li><li>keras</li><li>lasagne</li><li>mxnet</li><li>cntk</li><li>chainer</li><li>caffe</li><li>torch</li></ul><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接从<code>Docker Hub</code>下载<code>Deepo</code>镜像。<a href="https://github.com/ufoym/deepo" target="_blank" rel="external">Github地址</a></p><ul><li>CPU版本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ufoym/deepo:cpu</span><br></pre></td></tr></table></figure><ul><li>GPU版本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ufoym/deepo</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>打开<code>powershell</code>执行以下命令，以bash方式运行该容器。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it ufoym/deepo:cpu bash</span><br></pre></td></tr></table></figure><h2 id="DL-docker"><a href="#DL-docker" class="headerlink" title="DL-docker"></a>DL-docker</h2><p>包含的框架及系统依赖</p><ul><li>Ubuntu 14.04</li><li>CUDA 7.5 (GPU version only)</li><li>cuDNN v4 (GPU version only)</li><li>Tensorflow</li><li>Caffe</li><li>Theano</li><li>Keras</li><li>Lasagne</li><li>Torch (includes nn, cutorch, cunn and cuDNN bindings)</li><li>iPython/Jupyter Notebook (including iTorch kernel)</li><li>Numpy, SciPy, Pandas, Scikit Learn, Matplotlib</li><li>A few common libraries used for deep learning</li></ul><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><ul><li>cpu版本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull floydhub/dl-docker:cpu</span><br></pre></td></tr></table></figure><h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it -p 8888:8888 -p 6006:6006 -v /sharedfolder:/root/sharedfolder floydhub/dl-docker:cpu bash</span><br></pre></td></tr></table></figure><p>运行以上命令后，会连接到bash，执行<code>jupyter notebook</code>。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180307/E9gbbiD8dH.png?imageslim" alt="mark"></p><p>然后在Windows的浏览器中输入<code>localhost:8888</code>，会连接到该容器的<code>Jupyter notebook</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180307/0LLJg73D1G.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h2 id=&quot;Deepo&quot;&gt;&lt;a href=&quot;#Deepo&quot; class=&quot;headerlink&quot; title=&quot;Deepo&quot;&gt;&lt;/a&gt;Deepo&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Deepo&lt;/code&gt;是一个几乎包含所有流行深度学习框架的Docker映像，拥有一个完整的可复制的深度学习研究环境。它涵盖了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;theano&lt;/li&gt;
&lt;li&gt;tensorflow&lt;/li&gt;
&lt;li&gt;sonnet&lt;/li&gt;
&lt;li&gt;pytorch&lt;/li&gt;
&lt;li&gt;keras&lt;/li&gt;
&lt;li&gt;lasagne&lt;/li&gt;
&lt;li&gt;mxnet&lt;/li&gt;
&lt;li&gt;cntk&lt;/li&gt;
&lt;li&gt;chainer&lt;/li&gt;
&lt;li&gt;caffe&lt;/li&gt;
&lt;li&gt;torch&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://tianwenyu.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Windows" scheme="https://tianwenyu.github.io/tags/Windows/"/>
    
      <category term="Docker" scheme="https://tianwenyu.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常见问题解决方法</title>
    <link href="https://tianwenyu.github.io/hexo-solve/"/>
    <id>https://tianwenyu.github.io/hexo-solve/</id>
    <published>2018-02-27T11:29:36.000Z</published>
    <updated>2018-02-27T07:52:36.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fatal-HttpRequestException-encountered"><a href="#fatal-HttpRequestException-encountered" class="headerlink" title="fatal: HttpRequestException encountered."></a>fatal: HttpRequestException encountered.</h2><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180227/B88KJ5L618.png?imageslim" alt="mark"></p><p>将<code>_config.yml</code>中的<code>repository: https://github.com:username/username.github.io.git</code></p><p>改成<code>repository: git@github.com:username/username.github.io.git</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;fatal-HttpRequestException-encountered&quot;&gt;&lt;a href=&quot;#fatal-HttpRequestException-encountered&quot; class=&quot;headerlink&quot; title=&quot;fatal: HttpReque
      
    
    </summary>
    
      <category term="个人建站" scheme="https://tianwenyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="Hexo" scheme="https://tianwenyu.github.io/tags/Hexo/"/>
    
      <category term="GitPage" scheme="https://tianwenyu.github.io/tags/GitPage/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下安装Anaconda</title>
    <link href="https://tianwenyu.github.io/ubuntu-ancaconda/"/>
    <id>https://tianwenyu.github.io/ubuntu-ancaconda/</id>
    <published>2018-02-09T12:29:30.000Z</published>
    <updated>2018-02-27T07:29:31.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Anaconda安装"><a href="#Anaconda安装" class="headerlink" title="Anaconda安装"></a>Anaconda安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>使用<code>Python3.6</code>版本的<code>Anaconda 5.1</code>，<a href="https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh" target="_blank" rel="external">点击下载</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>进入到下载后的文件目录，执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash Anaconda3-5.1.0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>根据提示输入回车</p><p><img src="http://img.blog.csdn.net/20170628223151678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjMxODA3NA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p></li><li><p>查看注册信息，一直回车到输入<code>yes</code></p><p><img src="http://img.blog.csdn.net/20170628223509298?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjMxODA3NA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p><img src="http://img.blog.csdn.net/20170628223600909?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjMxODA3NA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p></li><li><p>输入安装目录路径，默认回车即可</p><p><img src="http://img.blog.csdn.net/20170628223649697?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjMxODA3NA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p></li><li><p>是否加入环境变量，输入<code>yes</code></p><p><img src="http://img.blog.csdn.net/20170628223754787?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjMxODA3NA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p></li><li><p>安装成功后，新打开一个终端输入以下命令查看版本号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anaconda -V</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用Jupyter-Notebook"><a href="#使用Jupyter-Notebook" class="headerlink" title="使用Jupyter Notebook"></a>使用Jupyter Notebook</h2><p>输入以下命令则能够使用<code>Jupyter Notebook</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipython notebook</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Anaconda安装&quot;&gt;&lt;a href=&quot;#Anaconda安装&quot; class=&quot;headerlink&quot; title=&quot;Anaconda安装&quot;&gt;&lt;/a&gt;Anaconda安装&lt;/h2&gt;&lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;Python3.6&lt;/code&gt;版本的&lt;code&gt;Anaconda 5.1&lt;/code&gt;，&lt;a href=&quot;https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击下载&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;进入到下载后的文件目录，执行&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bash Anaconda3-5.1.0-Linux-x86_64.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://tianwenyu.github.io/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="https://tianwenyu.github.io/tags/Ubuntu/"/>
    
      <category term="Anaconda" scheme="https://tianwenyu.github.io/tags/Anaconda/"/>
    
  </entry>
  
  <entry>
    <title>Windows下安装Jupyter Notebook</title>
    <link href="https://tianwenyu.github.io/windows-jupyter-notebook/"/>
    <id>https://tianwenyu.github.io/windows-jupyter-notebook/</id>
    <published>2018-02-09T12:29:30.000Z</published>
    <updated>2018-02-27T07:36:03.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="文学编程"><a href="#文学编程" class="headerlink" title="文学编程"></a>文学编程</h3><p>文学编程(Literate Programming)是由Donald Knuth提出的编程方法。传统的结构化编程，人要按照计算机的逻辑顺序来编写代码，而文学编程则可以让人们按照自己的逻辑来开发程序。</p><h3 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h3><p><code>Jupyter Notebook</code>是一个交互式笔记本，支持运行40多种编程语言。它的本质是一个Web应用程序，便于创建和共享文学化程序文档，支持实时代码、数学方程、可视化和markdown。</p><p><code>Jupyter Notebook</code>优点：</p><ul><li>适合数据分析</li><li>支持多语言</li><li>分享便捷</li><li>远程运行</li><li>交互式展示<a id="more"></a></li></ul><p>##安装</p><p>安装Anaconda即自带，不需要安装</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>点击<code>Jupyter Notebook</code>即可启动，或在cmd中输入<code>jupyter notebook</code></p><p>默认地址为<code>http:localhost:8888</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180214/I4lBa3iCj3.png?imageslim" alt="mark"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="更改Jupyter-Notebook工作空间"><a href="#更改Jupyter-Notebook工作空间" class="headerlink" title="更改Jupyter Notebook工作空间"></a>更改Jupyter Notebook工作空间</h3><p>最新版<code>Ipython</code>和<code>Jupyter</code>配置文件是分开的，需要分别配置文件。</p><ol><li><p>打开cmd输入命令<code>jupyter notebook --generate-config</code></p><p>【注】<code>-config</code>之前没有空格</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180214/8DC86687KH.png?imageslim" alt="mark"></p></li><li><p>打开该目录下的文件，改文件夹路径</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180214/lea2G5JDa7.png?imageslim" alt="mark"></p><p>【注】若存在编码问题，可改成<code>f://file//jupyter_notebook</code></p></li><li><p>启动<code>Jupyter Notebook</code></p></li></ol><h3 id="新建Notebook"><a href="#新建Notebook" class="headerlink" title="新建Notebook"></a>新建Notebook</h3><p>点击<code>new</code>创建新的<code>Notebook</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180214/CKGCg8a3h8.png?imageslim" alt="mark"></p><h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180214/K3eK1Lc3FH.png?imageslim" alt="mark"></p><p>菜单栏各项功能概述</p><ul><li><code>File</code><ul><li><code>Save and Checkpoint</code> 保存并记录点，类似于不同版本</li><li><code>Revert to Checkpoint</code>返回到某一记录点</li></ul></li><li><code>View</code><ul><li><code>Toggle Header</code>是否显示头部信息，包括文件名和上次保存时间</li><li><code>Toggle ToolBar</code>是否显示工具栏</li></ul></li><li><code>Kernel</code><ul><li><code>Change kernel</code>更换内核环境</li></ul></li></ul><p>Notebook文档由一系列<code>单元(cell)</code>,主要有两种形式的单元：</p><ul><li>代码状态单元：编写代码的区域，使用<code>Shift+Enter</code>运行代码，结果显示在本单元下方。代码单元左边有<code>In[1]：</code>类似的序列标记，方便人们查看代码的执行次序。</li><li>Markdown状态单元：编写文本的区域，使用<code>Shift+Enter</code>显示格式化的文本。</li></ul><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul><li>编辑模式：编辑文本和代码。选中单元按<code>Enter</code>进入编辑模式，单元左侧显示绿色竖线</li><li>命令模式：执行输入的命令。按<code>Esc</code>进入命令模式，单元左侧显示蓝色竖线</li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><ul><li>查看快捷键：<code>H</code></li></ul><ul><li>执行当前单元，并自动跳到下一个单元：<code>Shift+Enter</code></li><li>执行当前单元，不自动跳到下一个单元：<code>Ctrl+Enter</code></li><li>进入编辑模式：<code>Enter</code></li><li>进入命令模式：<code>Esc</code></li><li>删除当前单元：<code>双击D</code></li><li>变为代码状态：<code>Y</code></li><li>变为Markdown状态：<code>M</code></li><li>在下方插入新单元：<code>B</code></li><li>剪切选中单元：<code>X</code></li><li>复制选中单元：<code>C</code></li><li>粘贴到下方单元：<code>V</code></li><li>选中上方单元：<code>J</code></li><li>选中下方单元：<code>K</code></li><li>恢复删除的最后一个单元：<code>Z</code></li><li>保存当前Notebook：<code>Ctrl+S</code></li></ul><h4 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h4><ul><li>代码缩进或补全：<code>Tab</code></li><li>代码提示：<code>Shift+Tab</code></li><li>注释：<code>Ctrl+/</code></li></ul><h3 id="Magic命令"><a href="#Magic命令" class="headerlink" title="Magic命令"></a>Magic命令</h3><p><code>Magic命令</code>以<code>%</code>或<code>%%</code>开头</p><ul><li><code>%</code>：行命令</li><li><code>%%</code>：单元命令。必须出现在单元第一行。</li></ul><p>以下为常用<code>Magic命令</code></p><ul><li><code>%lsmagic</code>：列举所有Magic命令</li><li><code>%magic</code>：查看Magic命令说明</li><li><code>%timeit</code>：代码运行时间</li><li><code>%matplotlib inline</code>：显示matplotlib包生成的图形</li></ul><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><h3 id="运行Python文件"><a href="#运行Python文件" class="headerlink" title="运行Python文件"></a>运行Python文件</h3><p>运行以下命令</p><p><code>%run xxx.py</code></p><p>【注】<code>xxx.py</code>是当前工作空间下的一个python文件</p><h3 id="导入代码"><a href="#导入代码" class="headerlink" title="导入代码"></a>导入代码</h3><p>运行以下命令</p><p><code>%load xxx.py</code></p><p>【注】<code>xxx.py</code>是当前工作空间下的一个python文件 </p><h3 id="重置单元格序号"><a href="#重置单元格序号" class="headerlink" title="重置单元格序号"></a>重置单元格序号</h3><p>重置单元格<code>In[x]</code>序号</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180215/Ah0H7D7G9m.png?imageslim" alt="mark"></p><p>点击<code>Kernel-Restart</code>即可。</p><h3 id="使用Seaborn绘图"><a href="#使用Seaborn绘图" class="headerlink" title="使用Seaborn绘图"></a>使用<code>Seaborn</code>绘图</h3><p>需要使用<code>%matplotlib inline</code>命令。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h3 id=&quot;文学编程&quot;&gt;&lt;a href=&quot;#文学编程&quot; class=&quot;headerlink&quot; title=&quot;文学编程&quot;&gt;&lt;/a&gt;文学编程&lt;/h3&gt;&lt;p&gt;文学编程(Literate Programming)是由Donald Knuth提出的编程方法。传统的结构化编程，人要按照计算机的逻辑顺序来编写代码，而文学编程则可以让人们按照自己的逻辑来开发程序。&lt;/p&gt;
&lt;h3 id=&quot;Jupyter-Notebook&quot;&gt;&lt;a href=&quot;#Jupyter-Notebook&quot; class=&quot;headerlink&quot; title=&quot;Jupyter Notebook&quot;&gt;&lt;/a&gt;Jupyter Notebook&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Jupyter Notebook&lt;/code&gt;是一个交互式笔记本，支持运行40多种编程语言。它的本质是一个Web应用程序，便于创建和共享文学化程序文档，支持实时代码、数学方程、可视化和markdown。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Jupyter Notebook&lt;/code&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适合数据分析&lt;/li&gt;
&lt;li&gt;支持多语言&lt;/li&gt;
&lt;li&gt;分享便捷&lt;/li&gt;
&lt;li&gt;远程运行&lt;/li&gt;
&lt;li&gt;交互式展示
    
    </summary>
    
      <category term="机器学习" scheme="https://tianwenyu.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Notebook" scheme="https://tianwenyu.github.io/tags/Notebook/"/>
    
  </entry>
  
  <entry>
    <title>武大植物分布</title>
    <link href="https://tianwenyu.github.io/whu-plants/"/>
    <id>https://tianwenyu.github.io/whu-plants/</id>
    <published>2018-02-08T12:29:30.000Z</published>
    <updated>2018-02-27T07:51:22.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文理学部李达塑像"><a href="#文理学部李达塑像" class="headerlink" title="文理学部李达塑像"></a>文理学部李达塑像</h2><ul><li>樟树</li><li>蝴蝶花：4月，鸢尾科</li><li>鸢尾</li><li>吉祥草：百合科，秋花</li><li>南天竹：小檗科</li><li>锦绣杜鹃：杜鹃科</li><li>麦冬：百合科，6月开花</li><li>池衫</li><li>羊蹄：蓼科，酸模属</li><li>车前</li><li>蛇莓：蔷薇科，果不能吃</li><li>扬子毛茛</li><li>何首乌：蓼科</li><li>鸡矢藤：蓼科</li><li>海仙花</li><li>紫丁香</li><li>厚萼凌霄：位于亭子，6月开花</li><li>紫荆：苏木亚科，早春</li></ul><a id="more"></a><h2 id="工学部世纪广场"><a href="#工学部世纪广场" class="headerlink" title="工学部世纪广场"></a>工学部世纪广场</h2><ul><li>二球悬铃木</li><li>樟树</li><li>棕榈</li><li>复羽叶栾树</li><li>洋玉兰：常绿乔木，椭圆形革质叶</li><li>玉兰（白玉兰）：落叶乔木，先叶开花</li><li>结香：瑞香科，早春开花，先叶开花，花香久闻头疼</li><li>苏铁（铁树）：裸子植物，苏铁科</li><li>鹅观草：位于世纪广场草丛，下同</li><li>棒头草</li><li>雀麦</li><li>菵草</li><li>看麦娘</li><li>瓶尔小草：蕨类，此类是野生，不属于武大常规品种</li><li>绶草（盘龙参）：兰科，此类是野生，不属于武大常规品种</li></ul><h2 id="医学部广场"><a href="#医学部广场" class="headerlink" title="医学部广场"></a>医学部广场</h2><ul><li>雪松</li><li>桂花（木犀）</li><li>樟树</li><li>池衫</li><li>细叶结缕草：位于广场草地，下同</li><li>狗牙根</li><li>早熟禾：早春开花</li><li>救荒野豌豆：荚果，比下类野豌豆果长</li><li>四籽野豌豆：荚果，</li><li>匍茎通泉草：玄参科，通泉草属，二唇形花</li><li>直立婆婆纳：玄参科</li><li>垂丝海棠：，蔷薇科苹果亚科苹果属，不位于广场，下同</li><li>贴梗海棠：灌木状，木瓜属，结果</li><li>槐树：豆科</li><li>喜树：珙桐科</li></ul><h2 id="信部星湖园"><a href="#信部星湖园" class="headerlink" title="信部星湖园"></a>信部星湖园</h2><ul><li><p>孝顺竹：丛生，禾本科</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180210/2eCJgi70j3.png?imageslim" alt="mark"></p></li><li><p>君迁子（黑枣）：</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180210/hI1lbKdGmI.png?imageslim" alt="mark"></p></li><li><p>旱柳：星湖周围，下同</p></li><li><p>垂柳</p></li><li><p>榔榆：榆科，秋花秋果</p></li><li><p>朴树：榔榆旁边</p></li><li><p>木瓜：蔷薇科，树皮类似迷彩服</p></li><li><p>臭椿：苦木科</p></li><li><p>侧柏：柏科</p></li><li><p>柏木</p></li></ul><h2 id="武大牌坊入口区"><a href="#武大牌坊入口区" class="headerlink" title="武大牌坊入口区"></a>武大牌坊入口区</h2><ul><li>金叶女贞</li><li>大叶黄杨</li><li>樟树</li></ul><h2 id="人文馆"><a href="#人文馆" class="headerlink" title="人文馆"></a>人文馆</h2><ul><li>桂花</li><li>圆柏</li><li>海桐</li><li>含笑</li><li>大叶黄杨</li><li>龙爪槐</li><li>桃花：距离人文馆稍远处，下同</li><li>梅花</li><li>山茶</li><li>紫薇</li></ul><h2 id="情人坡"><a href="#情人坡" class="headerlink" title="情人坡"></a>情人坡</h2><ul><li>池衫</li><li>山茶</li><li>垂丝海棠</li><li>贴梗海棠</li><li>湖北海棠</li><li>木瓜</li></ul><h2 id="茶港教工宿舍区小游园"><a href="#茶港教工宿舍区小游园" class="headerlink" title="茶港教工宿舍区小游园"></a>茶港教工宿舍区小游园</h2><ul><li><p>枇杷</p></li><li><p>桂树</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180210/EKgABe2Gmd.png?imageslim" alt="mark"></p></li></ul><h2 id="西区教工宿舍小游园"><a href="#西区教工宿舍小游园" class="headerlink" title="西区教工宿舍小游园"></a>西区教工宿舍小游园</h2><ul><li>广玉兰</li><li>桂树</li><li>雪松</li><li>棕榈</li><li>小叶女贞</li><li>大叶黄杨</li><li>紫藤</li></ul><h2 id="中心湖区"><a href="#中心湖区" class="headerlink" title="中心湖区"></a>中心湖区</h2><ul><li>秤锤树</li><li>杜仲</li><li>榔榆</li><li>朴树</li><li>小叶栎</li><li>皂荚</li><li>毛竹</li><li>紫叶李</li><li>绣球荚蒾</li><li>红继木</li><li>鸡爪槭</li><li>红枫</li><li>蝴蝶花</li><li>麦冬</li><li>酢浆草</li></ul><h2 id="珞珈山枫园路"><a href="#珞珈山枫园路" class="headerlink" title="珞珈山枫园路"></a>珞珈山枫园路</h2><ul><li>水杉</li><li>枫树</li><li>棕榈</li><li>桂树</li><li>石楠</li><li>柑橘</li><li>鸡爪槭</li><li>紫叶李</li></ul><h2 id="老图书馆"><a href="#老图书馆" class="headerlink" title="老图书馆"></a>老图书馆</h2><h3 id="王世杰塑像"><a href="#王世杰塑像" class="headerlink" title="王世杰塑像"></a>王世杰塑像</h3><ul><li>银杏</li><li>黑松</li><li>刺柏</li><li>黄连木</li><li>石榴</li><li>海桐</li></ul><h3 id="王星拱塑像"><a href="#王星拱塑像" class="headerlink" title="王星拱塑像"></a>王星拱塑像</h3><ul><li>女贞</li><li>棕榈</li><li>海桐</li><li>法国冬青</li></ul><h3 id="西侧入口"><a href="#西侧入口" class="headerlink" title="西侧入口"></a>西侧入口</h3><ul><li>石榴</li><li>南天竹</li><li>桂树</li></ul><ul><li>石榴</li><li>桑树</li><li>落木石楠</li><li>朴树</li></ul><h3 id="东侧入口"><a href="#东侧入口" class="headerlink" title="东侧入口"></a>东侧入口</h3><ul><li>石楠</li><li>英国梧桐</li><li>龙柏</li><li>棕榈</li><li>侧柏</li><li>广玉兰</li></ul><h3 id="大楼前与老斋舍接邻草地"><a href="#大楼前与老斋舍接邻草地" class="headerlink" title="大楼前与老斋舍接邻草地"></a>大楼前与老斋舍接邻草地</h3><ul><li>大叶黄杨</li><li>油茶</li><li>石榴</li><li>侧柏</li><li>棕榈</li><li>柑橘</li><li>黑松</li><li>红檵木</li><li>狗牙根</li></ul><h3 id="老斋舍顶从东到西的种植槽"><a href="#老斋舍顶从东到西的种植槽" class="headerlink" title="老斋舍顶从东到西的种植槽"></a>老斋舍顶从东到西的种植槽</h3><ul><li>龙柏</li><li>椤木石楠</li><li>竹</li><li>木槿</li><li>紫藤</li><li>圆柏</li><li>刺柏</li></ul><h2 id="行政楼"><a href="#行政楼" class="headerlink" title="行政楼"></a>行政楼</h2><h3 id="行政楼内左右两侧的绿化圃"><a href="#行政楼内左右两侧的绿化圃" class="headerlink" title="行政楼内左右两侧的绿化圃"></a>行政楼内左右两侧的绿化圃</h3><ul><li>龙柏</li><li>吉祥草</li></ul><h3 id="行政楼东侧"><a href="#行政楼东侧" class="headerlink" title="行政楼东侧"></a>行政楼东侧</h3><ul><li>对节白蜡</li></ul><h2 id="樱花"><a href="#樱花" class="headerlink" title="樱花"></a>樱花</h2><p>基于<code>《珞珈山原色植物图谱》</code></p><ul><li>240号红花高盆樱：2月底至三月初开花，位于梅园校医院</li><li>241号尾叶樱桃：3-4月开花，位于行政楼旁，即绿樱，橘黄色果</li><li>242号大岛樱：3-4月开花，鲲鹏广场后的花园有几株</li><li>243号东京樱花：4月开花，奥场周围，樱花大道，黑果</li><li>244号垂枝樱花：3月底至四月初开花，晚樱，位于枫园14舍，岔路口通往枫园食堂。枫园三舍南侧路边、樱园南坡绿地（即情人坡）</li><li>245号日本晚樱：4月开花，教五周围，樱花大道和梅操之间情人坡，鲲鹏广场</li></ul><p><img src="https://pic4.zhimg.com/80/292c4dcc4552b69c99aea8298c790f07_hd.jpg" alt=""></p><p><img src="https://pic4.zhimg.com/80/cc4ffe797dd7ee59230304b315ae7b1d_hd.jpg" alt="img"></p><p><img src="https://pic4.zhimg.com/80/fea0820c2ca082386a4f5a92e73e4a2e_hd.jpg" alt="img"></p><ul><li>信部星湖东侧：</li></ul><p><img src="https://pic4.zhimg.com/80/v2-959da0b4f7bd6c6ec9348d713e3113ac_hd.jpg" alt="img"></p><ul><li>山樱花：又称福岛樱或青肤樱，4月初开花，花期15-20天，位于校医院前、教四前、樱园入口路旁、樱园南坡绿地（下沉花园）</li></ul><h2 id="绿线"><a href="#绿线" class="headerlink" title="绿线"></a>绿线</h2><h3 id="学府路"><a href="#学府路" class="headerlink" title="学府路"></a>学府路</h3><ul><li>樟树：行道树</li><li>金叶女贞：位于花坛</li><li>大叶黄杨：位于花坛</li></ul><h3 id="科技路"><a href="#科技路" class="headerlink" title="科技路"></a>科技路</h3><ul><li>广玉兰：生科院到教四楼行道树</li><li>银杏：生科院到教四楼行道树</li><li>大叶黄杨</li><li>英国梧桐：教四到樱园路行道树</li></ul><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><h3 id="用途分类"><a href="#用途分类" class="headerlink" title="用途分类"></a>用途分类</h3><h4 id="行道树"><a href="#行道树" class="headerlink" title="行道树"></a>行道树</h4><ul><li>银杏</li><li>雪松</li><li>池衫</li><li>水杉</li><li>三角枫</li><li>枫树</li><li>梅树</li><li>桂树</li><li>女贞</li><li>樟树</li><li>广玉兰</li><li>英国梧桐</li><li>垂柳</li><li>石楠</li><li>樱树</li></ul><h4 id="园景树"><a href="#园景树" class="headerlink" title="园景树"></a>园景树</h4><ul><li>樱树</li><li>圆柏</li><li>龙柏</li><li>重阳木</li><li>拐枣</li><li>榉树</li><li>榔榆</li><li>朴树</li><li>三角枫</li><li>雪松</li><li>杜英</li><li>水杉</li><li>乌桕</li><li>复羽叶栾树</li><li>梧桐</li><li>国槐</li><li>石楠</li><li>白玉兰</li><li>棕榈</li><li>黄连木</li></ul><h4 id="花灌类"><a href="#花灌类" class="headerlink" title="花灌类"></a>花灌类</h4><ul><li>红枫</li><li>紫薇</li><li>卫矛</li><li>紫叶桃</li><li>紫叶李</li><li>海桐</li><li>金丝桃</li><li>八角金盘</li><li>南天竹</li><li>竹叶椒</li><li>杜鹃</li><li>云南黄馨</li><li>月季</li><li>火棘</li><li>枸骨</li></ul><h4 id="绿篱类"><a href="#绿篱类" class="headerlink" title="绿篱类"></a>绿篱类</h4><ul><li>马甲子</li><li>栀子</li><li>十大功劳</li><li>金心黄杨</li><li>雀舌黄杨</li><li>紫叶小檗</li><li>法国冬青</li></ul><h4 id="花坛花境类"><a href="#花坛花境类" class="headerlink" title="花坛花境类"></a>花坛花境类</h4><ul><li>月季</li><li>杜鹃</li><li>葱兰</li><li>一串红</li><li>一串蓝</li><li>火棘</li><li>重瓣棣棠</li><li>石蒜</li><li>大花马齿苋</li><li>夜来香</li><li>柳叶马鞭草</li><li>矮亚菊</li><li>山茶</li><li>夹竹桃</li><li>结香</li><li>木槿</li><li>中华绣线菊</li><li>凤尾鸡冠花</li><li>金盏菊</li><li>雏菊</li><li>金鸡菊</li><li>玉簪</li><li>萱草</li><li>美人蕉</li><li>锦带花</li><li>金钟花</li></ul><h3 id="观赏特性"><a href="#观赏特性" class="headerlink" title="观赏特性"></a>观赏特性</h3><h4 id="观形树"><a href="#观形树" class="headerlink" title="观形树"></a>观形树</h4><ul><li>樟树</li><li>桂花</li><li>银杏</li><li>池衫</li><li>水杉</li><li>马尾松</li><li>雪松</li><li>侧柏</li><li>龙柏</li><li>广玉兰</li><li>英国梧桐</li><li>石楠</li><li>椤木石楠</li><li>红檵木</li><li>垂柳</li><li>朴树</li><li>大叶黄杨</li><li>三角枫</li><li>鸡爪槭</li><li>女贞</li><li>白花泡棢</li><li>榔榆</li><li>日本冷杉</li><li>黑松</li><li>金钱松</li><li>杉木</li><li>日本柳杉</li><li>落羽杉</li><li>日本花柏</li><li>罗汉松</li><li>鹅掌楸</li><li>粗榧</li><li>润楠</li><li>合欢</li><li>黄杨</li><li>雀舌黄杨</li><li>交让木</li><li>旱柳</li><li>胡桃</li><li>化香</li><li>卫矛</li><li>珊瑚朴</li><li>榆树</li><li>榉树</li><li>乌桕</li><li>重阳木</li><li>南酸枣</li><li>黄连木</li><li>盐肤木</li><li>中华槭</li><li>金钟花</li><li>白蜡树</li><li>十大功劳</li><li>紫薇</li><li>毛泡桐</li><li>七叶树</li></ul><h4 id="观花树"><a href="#观花树" class="headerlink" title="观花树"></a>观花树</h4><h5 id="春"><a href="#春" class="headerlink" title="春"></a>春</h5><ul><li>含笑</li><li>白玉兰</li><li>桃</li><li>湖北海棠</li><li>李</li><li>梅</li><li>樱</li><li>麻叶绣线菊</li><li>中华绣线菊</li><li>重瓣棣棠</li><li>紫荆</li><li>瑞香</li><li>连翘</li><li>金钟花</li><li>探春花</li><li>云南黄馨</li><li>毛泡桐</li><li>白花泡桐</li></ul><h5 id="夏"><a href="#夏" class="headerlink" title="夏"></a>夏</h5><ul><li>广玉兰</li><li>金樱子</li><li>小果蔷薇</li><li>山合欢</li><li>合欢</li><li>绣球</li><li>山茱萸</li><li>荚蒾</li><li>红檵木</li><li>栾树</li><li>栀子</li><li>金丝桃</li><li>六月雪</li></ul><h5 id="春夏"><a href="#春夏" class="headerlink" title="春夏"></a>春夏</h5><ul><li>紫藤</li><li>锦鸡儿</li><li>忍冬</li><li>锦带花</li><li>芜花</li><li>石楠</li></ul><h5 id="夏秋"><a href="#夏秋" class="headerlink" title="夏秋"></a>夏秋</h5><ul><li>白兰</li><li>糯米条</li><li>六道木</li><li>木槿</li><li>木芙蓉</li><li>多花勾儿茶</li><li>夹竹桃</li><li>牡荆</li><li>石榴</li><li>锦葵</li></ul><h5 id="秋"><a href="#秋" class="headerlink" title="秋"></a>秋</h5><ul><li>决明</li></ul><h5 id="冬春"><a href="#冬春" class="headerlink" title="冬春"></a>冬春</h5><ul><li>腊梅</li><li>油茶</li></ul><h5 id="四季"><a href="#四季" class="headerlink" title="四季"></a>四季</h5><ul><li>月季</li><li>杜鹃</li><li>桂花</li></ul><h4 id="观叶树木"><a href="#观叶树木" class="headerlink" title="观叶树木"></a>观叶树木</h4><h5 id="春-1"><a href="#春-1" class="headerlink" title="春"></a>春</h5><ul><li>山麻秆</li><li>石楠</li></ul><h5 id="秋-1"><a href="#秋-1" class="headerlink" title="秋"></a>秋</h5><ul><li>金钱松</li><li>落羽杉</li><li>水杉</li><li>池衫</li><li>银杏</li><li>鹅掌楸</li><li>榔榆</li><li>朴树</li><li>榆树</li><li>榉树</li><li>美国地锦</li><li>三角枫</li><li>鸡爪槭</li><li>中华槭</li><li>英国梧桐</li><li>重阳木</li><li>七叶树</li></ul><h5 id="四季-1"><a href="#四季-1" class="headerlink" title="四季"></a>四季</h5><ul><li>紫叶桃</li><li>紫叶李</li></ul><h5 id="特殊叶形"><a href="#特殊叶形" class="headerlink" title="特殊叶形"></a>特殊叶形</h5><ul><li>紫荆</li><li>八角枫</li><li>八角金盘</li><li>黄杨</li><li>雀舌黄杨</li><li>锦熟黄杨</li><li>旱柳</li><li>垂柳</li><li>海桐</li><li>爬山虎</li><li>美国地锦</li><li>大叶黄杨</li><li>夹竹桃</li><li>苏铁</li></ul><h2 id="杂集"><a href="#杂集" class="headerlink" title="杂集"></a>杂集</h2><ul><li>秤锤树：位于未名湖畔东南角</li><li>大叶黄杨：位于梅园花坛</li><li>鹅掌楸：花期4-5月，枫园五舍、工学部网球场、珞珈广场</li><li>含笑：花期4-6月，位于标本馆前、校医院前花坛</li><li>红花酢浆草：校园花坛广布</li><li>红花石蒜：位于樱花大道至标本馆一带</li><li>海桐：花期4-5月，人文馆周边</li><li>合欢：珞珈山庄背面山坡、鲲鹏广场</li><li>花木兰：学校行道树</li><li>金丝桃：花期7-8月，梅园花坛</li><li>金银花：又名忍冬，花期4-6月，路旁、山坡灌丛、疏林中</li><li>鸡冠花：花期8-10月，花坛栽培</li><li>郁李：位于樱园</li><li>鸢尾：梅园花坛</li><li>棕榈：茶港教工生活区行道树</li><li>水杉：茶港教工生活区行道树</li><li>马尾松：南三区教工宿舍区</li><li>石榴：南三区教工宿舍区</li><li>女贞：狮子山、行政楼</li><li>枫树：枫园、奥场、珞珈广场</li><li>枫香树：枫园</li><li>桑树：信部、樱顶</li><li>樱花大道旁8棵银杏是20世纪30年代珞珈山建校初期栽植</li><li>罗汉松：育才路</li><li>绿樱：行政楼前</li><li>美人梅：梅园，梅和紫叶李杂交</li><li>阿拉伯婆婆纳：</li><li>柞树：武大附小花坛旁</li><li>南酸枣：武大梅园，名木</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文理学部李达塑像&quot;&gt;&lt;a href=&quot;#文理学部李达塑像&quot; class=&quot;headerlink&quot; title=&quot;文理学部李达塑像&quot;&gt;&lt;/a&gt;文理学部李达塑像&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;樟树&lt;/li&gt;
&lt;li&gt;蝴蝶花：4月，鸢尾科&lt;/li&gt;
&lt;li&gt;鸢尾&lt;/li&gt;
&lt;li&gt;吉祥草：百合科，秋花&lt;/li&gt;
&lt;li&gt;南天竹：小檗科&lt;/li&gt;
&lt;li&gt;锦绣杜鹃：杜鹃科&lt;/li&gt;
&lt;li&gt;麦冬：百合科，6月开花&lt;/li&gt;
&lt;li&gt;池衫&lt;/li&gt;
&lt;li&gt;羊蹄：蓼科，酸模属&lt;/li&gt;
&lt;li&gt;车前&lt;/li&gt;
&lt;li&gt;蛇莓：蔷薇科，果不能吃&lt;/li&gt;
&lt;li&gt;扬子毛茛&lt;/li&gt;
&lt;li&gt;何首乌：蓼科&lt;/li&gt;
&lt;li&gt;鸡矢藤：蓼科&lt;/li&gt;
&lt;li&gt;海仙花&lt;/li&gt;
&lt;li&gt;紫丁香&lt;/li&gt;
&lt;li&gt;厚萼凌霄：位于亭子，6月开花&lt;/li&gt;
&lt;li&gt;紫荆：苏木亚科，早春&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="杂七杂八" scheme="https://tianwenyu.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="杂七杂八" scheme="https://tianwenyu.github.io/tags/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
  </entry>
  
  <entry>
    <title>【Python Trick】Python中字典常用方法</title>
    <link href="https://tianwenyu.github.io/python-dict/"/>
    <id>https://tianwenyu.github.io/python-dict/</id>
    <published>2018-02-08T12:29:30.000Z</published>
    <updated>2018-02-27T07:28:34.151Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典常用操作"><a href="#字典常用操作" class="headerlink" title="字典常用操作"></a>字典常用操作</h2><h3 id="定义空字典"><a href="#定义空字典" class="headerlink" title="定义空字典"></a>定义空字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic=&#123;&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="键值对的添加"><a href="#键值对的添加" class="headerlink" title="键值对的添加"></a>键值对的添加</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic[<span class="string">'name'</span>]=<span class="string">'zhangsan'</span></span><br></pre></td></tr></table></figure><h2 id="字典遍历"><a href="#字典遍历" class="headerlink" title="字典遍历"></a>字典遍历</h2><p>通过<code>items()</code>方法返回的元组列表进行序列解包</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dic.items():</span><br><span class="line">    print(<span class="string">'&#123;&#125;:&#123;&#125;'</span>.format(key,value))</span><br><span class="line">    <span class="comment">#print('%s:%s' %(key,value))</span></span><br></pre></td></tr></table></figure><h2 id="字典排序"><a href="#字典排序" class="headerlink" title="字典排序"></a>字典排序</h2><h3 id="字典按键排序"><a href="#字典按键排序" class="headerlink" title="字典按键排序"></a>字典按键排序</h3><h4 id="第一类"><a href="#第一类" class="headerlink" title="第一类"></a>第一类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic=&#123;</span><br><span class="line">    <span class="string">"key1"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"key2"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">"key3"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"key4"</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line">print(key,dic[key] <span class="keyword">for</span> key <span class="keyword">in</span> sorted(dic.keys))</span><br></pre></td></tr></table></figure><h4 id="第二类"><a href="#第二类" class="headerlink" title="第二类"></a>第二类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic=&#123;</span><br><span class="line">    <span class="string">"key1"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"key2"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">"key3"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"key4"</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#升序排序</span></span><br><span class="line">dic=dict(sorted(dic.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>]))</span><br><span class="line"><span class="comment">#降序排序</span></span><br><span class="line">dic=dict(sorted(dic.itmes(),key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>],reverse=<span class="keyword">True</span>))</span><br></pre></td></tr></table></figure><p><code>sorted(iterable,key,reverse)</code></p><ul><li><code>iterable</code>参数代表可以迭代的对象，例如可以是<code>dict.items()</code>，<code>dict.keys()</code></li><li><code>key</code>参数是一个函数，用来选取参与比较的元素</li><li><code>reverse</code>参数用来指定是升序还是降序</li></ul><p><code>dic=dict(sorted(dic.items(),key=lambda x:x[0]))</code></p><ul><li><p><code>dic.items()</code>将<code>dic</code>转换为可迭代对象，迭代对象的元素为该字典元素，将其转换为元组</p></li><li><p>key参数对应的lambda表达式即选取元组中的第一个元素作为比较参数，即键。</p><p><code>lambda x:y</code>x表示输出参数，y表示lambda函数的返回值.</p></li><li><p><code>sorted()</code>函数返回值是list类型。</p></li></ul><h3 id="字典按值排序并输出Top-K个元素"><a href="#字典按值排序并输出Top-K个元素" class="headerlink" title="字典按值排序并输出Top K个元素"></a>字典按值排序并输出Top K个元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic=&#123;</span><br><span class="line">    <span class="string">"key1"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"key2"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">"key3"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"key4"</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#升序排序</span></span><br><span class="line">dic=dict(sorted(dic.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>]))</span><br><span class="line"><span class="comment">#降序排序</span></span><br><span class="line">dic=dict(sorted(dic.itmes(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出Top K个</span></span><br><span class="line">cnt=<span class="number">0</span></span><br><span class="line">k=<span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dic.items():</span><br><span class="line">    cnt+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> cnt&gt;k:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">'&#123;&#125;:&#123;&#125;'</span>.format(key,value))</span><br></pre></td></tr></table></figure><h2 id="字典对象写入Json文件"><a href="#字典对象写入Json文件" class="headerlink" title="字典对象写入Json文件"></a>字典对象写入Json文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dic=&#123;</span><br><span class="line">    <span class="string">"key1"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"key2"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">"key3"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"key4"</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#中文字符需要设置ensure_ascii属性为False，否则输出为ASII码</span></span><br><span class="line">data=json.dumps(dic,ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.json'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字典常用操作&quot;&gt;&lt;a href=&quot;#字典常用操作&quot; class=&quot;headerlink&quot; title=&quot;字典常用操作&quot;&gt;&lt;/a&gt;字典常用操作&lt;/h2&gt;&lt;h3 id=&quot;定义空字典&quot;&gt;&lt;a href=&quot;#定义空字典&quot; class=&quot;headerlink&quot; title=&quot;定义空字典&quot;&gt;&lt;/a&gt;定义空字典&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dic=&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="https://tianwenyu.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://tianwenyu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【Python Trick】Python的switch-case实现</title>
    <link href="https://tianwenyu.github.io/python-switch/"/>
    <id>https://tianwenyu.github.io/python-switch/</id>
    <published>2018-02-07T12:29:30.000Z</published>
    <updated>2018-02-07T02:58:20.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Python中，并没有实现<code>switch-case</code>语句，通过<code>if-elif</code>实现会显得麻烦，因此通过以下方式实现该语句功能。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="通过字典实现"><a href="#通过字典实现" class="headerlink" title="通过字典实现"></a>通过字典实现</h3><p>以如下情景为例，将百分制分数转换为五分制分数。如<code>100%</code>转换为<code>5</code>，<code>80%</code>转换为<code>4</code>等。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(score)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'100%'</span>:<span class="number">5</span>,</span><br><span class="line">            <span class="string">'80%'</span>:<span class="number">4</span>,</span><br><span class="line">            <span class="string">'60%'</span>:<span class="number">3</span>,</span><br><span class="line">            <span class="string">'40%'</span>:<span class="number">2</span>,</span><br><span class="line">            <span class="string">'20%'</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">'0%'</span>:<span class="number">0</span></span><br><span class="line">        &#125;.get(score)</span><br><span class="line"></span><br><span class="line">print(foo(<span class="string">'100%'</span>)) <span class="comment">#输出5</span></span><br><span class="line">print(foo(<span class="string">'80%'</span>)) <span class="comment">#输出4</span></span><br></pre></td></tr></table></figure><h3 id="通过匿名函数实现"><a href="#通过匿名函数实现" class="headerlink" title="通过匿名函数实现"></a>通过匿名函数实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(score,x)</span>:</span></span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line"><span class="string">'100%'</span>:<span class="keyword">lambda</span> x:x+<span class="number">5</span>,</span><br><span class="line"><span class="string">'80%'</span>:<span class="keyword">lambda</span> x:x+<span class="number">4</span>,</span><br><span class="line"><span class="string">'60%'</span>:<span class="keyword">lambda</span> x:x+<span class="number">3</span>,</span><br><span class="line"><span class="string">'40%'</span>:<span class="keyword">lambda</span> x:x+<span class="number">2</span>,</span><br><span class="line"><span class="string">'20%'</span>:<span class="keyword">lambda</span> x:x+<span class="number">1</span>,</span><br><span class="line"><span class="string">'0%'</span>:<span class="keyword">lambda</span> x:x+<span class="number">0</span>,</span><br><span class="line">&#125;[score](x)</span><br><span class="line"></span><br><span class="line">print(foo(<span class="string">'100%'</span>,<span class="number">0</span>)) <span class="comment">#输出5</span></span><br><span class="line">print(foo(<span class="string">'80%'</span>,<span class="number">0</span>)) <span class="comment">#输出4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在Python中，并没有实现&lt;code&gt;switch-case&lt;/code&gt;语句，通过&lt;code&gt;if-elif&lt;/code&gt;实现会显得麻烦，因此通过以下方式实现该语句功能。&lt;/p&gt;
&lt;h2 id=&quot;实现方式&quot;&gt;&lt;a href=&quot;#实现方式&quot; class=&quot;headerlink&quot; title=&quot;实现方式&quot;&gt;&lt;/a&gt;实现方式&lt;/h2&gt;&lt;h3 id=&quot;通过字典实现&quot;&gt;&lt;a href=&quot;#通过字典实现&quot; class=&quot;headerlink&quot; title=&quot;通过字典实现&quot;&gt;&lt;/a&gt;通过字典实现&lt;/h3&gt;&lt;p&gt;以如下情景为例，将百分制分数转换为五分制分数。如&lt;code&gt;100%&lt;/code&gt;转换为&lt;code&gt;5&lt;/code&gt;，&lt;code&gt;80%&lt;/code&gt;转换为&lt;code&gt;4&lt;/code&gt;等。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://tianwenyu.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://tianwenyu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Windows下pip更换源地址</title>
    <link href="https://tianwenyu.github.io/windows-pip/"/>
    <id>https://tianwenyu.github.io/windows-pip/</id>
    <published>2018-02-07T12:29:30.000Z</published>
    <updated>2018-02-07T06:05:32.953Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>打开<code>cmd</code>，输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> %APPDATA%</span><br></pre></td></tr></table></figure><p>进入到显示的路径中</p></li><li><p>进入该路径，新建<code>pip</code>文件夹，然后在该文件夹下新建<code>pip.ini</code></p></li><li><p>编辑<code>pip.ini</code>，输入以下内容，即把源地址改为阿里云地址。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">6000</span></span><br><span class="line"><span class="attr">index-url</span> = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span>=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开&lt;code&gt;cmd&lt;/code&gt;，输入&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_
      
    
    </summary>
    
      <category term="Python" scheme="https://tianwenyu.github.io/categories/Python/"/>
    
    
      <category term="Windows" scheme="https://tianwenyu.github.io/tags/Windows/"/>
    
      <category term="pip" scheme="https://tianwenyu.github.io/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>Seaborn库的使用</title>
    <link href="https://tianwenyu.github.io/seaborn/"/>
    <id>https://tianwenyu.github.io/seaborn/</id>
    <published>2018-02-07T02:29:30.000Z</published>
    <updated>2018-02-27T07:31:11.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CountPlot"><a href="#CountPlot" class="headerlink" title="CountPlot"></a>CountPlot</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">train_data=pd.read_csv(<span class="string">'./data/train.csv'</span>)</span><br><span class="line">sns.countplot(x=<span class="string">'Score'</span>,data=train_data)</span><br></pre></td></tr></table></figure><a id="more"></a><p><code>sns.countplot(x=&#39;Score&#39;,data=train_data)</code></p><p>【注】</p><p>属性<code>x</code>为x轴名称，值必须为数据集中的列名。属性<code>x</code>或<code>y</code>中任一一组没有值，则默认<code>count</code></p><p>属性<code>data</code>为数据集，值可以为<code>pandas</code>的<code>dataframe</code>类型。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CountPlot&quot;&gt;&lt;a href=&quot;#CountPlot&quot; class=&quot;headerlink&quot; title=&quot;CountPlot&quot;&gt;&lt;/a&gt;CountPlot&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;%matplotlib inline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; seaborn &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; sns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;train_data=pd.read_csv(&lt;span class=&quot;string&quot;&gt;&#39;./data/train.csv&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sns.countplot(x=&lt;span class=&quot;string&quot;&gt;&#39;Score&#39;&lt;/span&gt;,data=train_data)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://tianwenyu.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Seaborn" scheme="https://tianwenyu.github.io/tags/Seaborn/"/>
    
  </entry>
  
  <entry>
    <title>【汽车口碑分析】3.爬取汽车评论数据</title>
    <link href="https://tianwenyu.github.io/automobile-analysis-3/"/>
    <id>https://tianwenyu.github.io/automobile-analysis-3/</id>
    <published>2018-02-03T12:29:30.000Z</published>
    <updated>2018-02-07T02:22:56.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li>Ubuntu 16.04</li><li>Python 3.5</li></ul><h2 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h2><ul><li>Scrapy</li></ul><h2 id="需求目标"><a href="#需求目标" class="headerlink" title="需求目标"></a>需求目标</h2><p>本项目为汽车口碑分析，第一步需要爬取对于不同车型的评论数据。</p><p>选择<a href="http://www.58che.com/brand.html" target="_blank" rel="external">58车</a>的车型分类爬取评论数据。</p><a id="more"></a><h2 id="爬取流程"><a href="#爬取流程" class="headerlink" title="爬取流程"></a>爬取流程</h2><ol><li><p>先获取每个车型的链接，以下图中红框内的车型为例</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180206/jB04IJjkLk.png?imageslim" alt="mark"></p></li><li><p>打开链接后，抓取下图红框中的总评分，写入文件中。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180206/5j7LE7l1EB.png?imageslim" alt="mark"></p></li><li><p>写入总评分后，通过拼接链接进入该车型的用户评论页面。</p><p>通过第一步中获取的链接拼接上<code>list_s1_p1.html</code>，组成用户评论页面的链接。</p><p>【注】此为第一页的链接，若还有下一页，下述步骤会提及处理方法。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180206/9KaKELGGj7.png?imageslim" alt="mark"></p></li><li><p>抓取评论页面中的各种数据，如<code>id</code>，<code>评分</code>，<code>评论</code>等。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180206/24mD9Kk40g.png?imageslim" alt="mark"></p></li><li><p>若该评论页面还有<code>下一页</code>，则继续抓取下一页中的评论数据。</p><p>【方法】</p><p>判断页面中是否有<code>下一页</code>元素，若有则回调解析评论页面的方法。</p></li><li><p>将爬取的数据保存到文件中。</p></li></ol><h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><h3 id="创建新工程"><a href="#创建新工程" class="headerlink" title="创建新工程"></a>创建新工程</h3><p>先创建工程目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/t/dataset/</span><br><span class="line">mkdir carSpider</span><br></pre></td></tr></table></figure><p>创建新工程</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scrapy startproject carSpider</span><br></pre></td></tr></table></figure><h3 id="编辑items-py文件"><a href="#编辑items-py文件" class="headerlink" title="编辑items.py文件"></a>编辑<code>items.py</code>文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># http://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarspiderItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    file=scrapy.Field() <span class="comment">#文件名</span></span><br><span class="line">    car=scrapy.Field() <span class="comment">#车型</span></span><br><span class="line">    score=scrapy.Field() <span class="comment">#总评分</span></span><br><span class="line">    u_id=scrapy.Field() <span class="comment">#用户ID</span></span><br><span class="line">    u_score=scrapy.Field() <span class="comment">#用户评分</span></span><br><span class="line">    u_merit=scrapy.Field() <span class="comment">#用户评论优点</span></span><br><span class="line">    u_demerit=scrapy.Field() <span class="comment">#用户评论缺点</span></span><br><span class="line">    u_summary=scrapy.Field() <span class="comment">#用户评论综述</span></span><br><span class="line">    u_flower=scrapy.Field() <span class="comment">#用户评论鲜花数</span></span><br><span class="line">    u_brick=scrapy.Field() <span class="comment">#用户评论板砖数</span></span><br></pre></td></tr></table></figure><h3 id="编写carSpider-py文件"><a href="#编写carSpider-py文件" class="headerlink" title="编写carSpider.py文件"></a>编写<code>carSpider.py</code>文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> carSpider.items <span class="keyword">import</span> CarspiderItem</span><br><span class="line"></span><br><span class="line">baseDir = <span class="string">'/home/t/dataset/carRemark/'</span></span><br><span class="line">startUrl=<span class="string">'http://www.58che.com/brand.html'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line"></span><br><span class="line">    name=<span class="string">'spider'</span> <span class="comment">#爬虫名</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start_urls=[startUrl] </span><br><span class="line"></span><br><span class="line">    <span class="comment">#第一层解析方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self,response)</span>:</span></span><br><span class="line"><span class="comment">#定位到车型元素</span></span><br><span class="line">        subclasses=response.css(<span class="string">'body &gt; div.fltop &gt; div.marcenter &gt; div &gt; div &gt; div.r &gt; ul &gt; li &gt; dl &gt; dt &gt; a'</span>)</span><br><span class="line">        <span class="keyword">for</span> subclass <span class="keyword">in</span> subclasses:</span><br><span class="line">            subclass_name=subclass.xpath(<span class="string">'text()'</span>).extract_first() <span class="comment">#获取车型名称文本</span></span><br><span class="line">            subclass_link=subclass.xpath(<span class="string">'@href'</span>).extract_first() <span class="comment">#获取车型链接</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=subclass_link,callback=self.parse_car_subclass,meta=&#123;<span class="string">'file'</span>:subclass_name&#125;) <span class="comment">#回调下一层解析方法，并把车型名称传递给该方法作为文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二层解析方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_car_subclass</span><span class="params">(self,response)</span>:</span></span><br><span class="line">        infos=response.css(<span class="string">'#line1 &gt; div.cars_line2.l &gt; div.dianpings &gt; div.d_div1.clearfix &gt; font'</span>) <span class="comment">#定位到总评分元素</span></span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">            score=info.xpath(<span class="string">'text()'</span>).extract_first() <span class="comment">#获取总评分元素文本</span></span><br><span class="line">            file=response.meta[<span class="string">'file'</span>] <span class="comment">#获取上个Request传递来的meta['file']</span></span><br><span class="line">            self.writeScore(file,score) <span class="comment">#将总评分写入文件中</span></span><br><span class="line">            link=response.url+<span class="string">'list_s1_p1.html'</span> <span class="comment">#拼接用户评论第一页链接</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=link,callback=self.parse_remark,meta=&#123;<span class="string">'file'</span>:file&#125;) <span class="comment">#回调下一层解析方法，把车型名称传递给该方法作为文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第三层解析方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_remark</span><span class="params">(self,response)</span>:</span></span><br><span class="line">        <span class="comment">#定位到用户评论元素</span></span><br><span class="line">        infos=response.css(<span class="string">'body &gt; div.newbox &gt; div &gt; div.xgo_cars_w760.l &gt; div.xgo_dianping_infos.mb10 &gt; div.xgo_cars_dianping &gt; div &gt; dl'</span>)</span><br><span class="line">        <span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">            uid=info.xpath(<span class="string">'dd[1]/strong/a/text()'</span>)[<span class="number">0</span>].extract() <span class="comment">#获取用户ID</span></span><br><span class="line">            score=info.xpath(<span class="string">'dd[1]/div/div/@style'</span>)[<span class="number">0</span>].extract() <span class="comment">#获取用户评分星级</span></span><br><span class="line">            score=self.getScore(score) <span class="comment">#将用户评分星级转化为5分制评分</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#先获取是否有‘优点’元素，若有则定位‘优点’元素的下一个兄弟节点，即‘优点评语’，若无则为空</span></span><br><span class="line">                node=info.xpath(<span class="string">'dd[2]/div/div[contains(@class,"l redc00")]'</span>)[<span class="number">0</span>] </span><br><span class="line">                <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                    merit=node.xpath(<span class="string">'following-sibling::*[1]/text()'</span>)[<span class="number">0</span>].extract()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    merit=<span class="string">''</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                merit=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#先获取是否有‘缺点’元素，若有则定位‘缺点’元素的下一个兄弟节点，即‘缺点评语’，若无则为空</span></span><br><span class="line">                node=info.xpath(<span class="string">'dd[2]/div/div[contains(@class,"l hei666")]'</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                    demerit=node.xpath(<span class="string">'following-sibling::*[1]/text()'</span>)[<span class="number">0</span>].extract()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    demerit=<span class="string">''</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                demerit=<span class="string">''</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#先获取是否有‘综述’元素，若有则定位‘综述’元素的下一个兄弟节点，即‘综述评语’，若无则为空</span></span><br><span class="line">                node=info.xpath(<span class="string">'dd[2]/div/div[contains(@class,"l")]'</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                    summary=node.xpath(<span class="string">'following-sibling::*[1]/text()'</span>)[<span class="number">0</span>].extract()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    summary=<span class="string">''</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                summary=<span class="string">''</span></span><br><span class="line"></span><br><span class="line">            flower=info.xpath(<span class="string">'dd[2]/div[contains(@class,"apply")]/a[3]/span/text()'</span>)[<span class="number">0</span>].extract() <span class="comment">#获取鲜花数</span></span><br><span class="line">            brick=info.xpath(<span class="string">'dd[2]/div[contains(@class,"apply")]/a[4]/span/text()'</span>)[<span class="number">0</span>].extract() <span class="comment">#获取板砖数</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#创建Item</span></span><br><span class="line">            item=CarspiderItem()</span><br><span class="line">            item[<span class="string">'file'</span>]=response.meta[<span class="string">'file'</span>]</span><br><span class="line">            item[<span class="string">'u_id'</span>]=uid</span><br><span class="line">            item[<span class="string">'u_score'</span>]=score</span><br><span class="line">            item[<span class="string">'u_merit'</span>]=merit</span><br><span class="line">            item[<span class="string">'u_demerit'</span>]=demerit</span><br><span class="line">            item[<span class="string">'u_summary'</span>]=summary</span><br><span class="line">            item[<span class="string">'u_flower'</span>]=flower</span><br><span class="line">            item[<span class="string">'u_brick'</span>]=brick</span><br><span class="line"></span><br><span class="line">            <span class="comment">#生成Item</span></span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line">            </span><br><span class="line">        <span class="comment">#获取`下一页`元素，若有则回调`parse_remark`第三层解析方法，即继续获取下一页用户评论数据</span></span><br><span class="line">        <span class="comment">#定位`下一页`元素</span></span><br><span class="line">        next_pages=response.css(<span class="string">'body &gt; div.newbox &gt; div &gt; div.xgo_cars_w760.l &gt; div.xgo_dianping_infos.mb10 &gt; div.xgo_cars_dianping &gt; div &gt; div &gt; a.next'</span>)</span><br><span class="line">        <span class="keyword">for</span> next_page <span class="keyword">in</span> next_pages:</span><br><span class="line">            <span class="comment">#若有`下一页`元素，则拼接`下一页`元素链接，并回调第三层解析方法，用来获取下一页用户评论数据</span></span><br><span class="line">            <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                next_page_link=next_page.xpath(<span class="string">'@href'</span>)[<span class="number">0</span>].extract()</span><br><span class="line">                next_page_link=<span class="string">'http://www.58che.com'</span>+next_page_link</span><br><span class="line">                file=response.meta[<span class="string">'file'</span>]</span><br><span class="line">                <span class="keyword">yield</span> scrapy.Request(url=next_page_link, callback=self.parse_remark, meta=&#123;<span class="string">'file'</span>: file&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将总评分写入文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writeScore</span><span class="params">(self,file,score)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'/home/t/dataset/carRemark/'</span>+file+<span class="string">'.json'</span>,<span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(score+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将用户评分星级转为5分制分数，类似switch功能</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getScore</span><span class="params">(self,text)</span>:</span></span><br><span class="line">        text=text.split(<span class="string">':'</span>)[<span class="number">1</span>] <span class="comment">#分割文本，原文本格式形如`width:100%`，分割并截取`:`后的文本</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'100%'</span>:<span class="number">5</span>,</span><br><span class="line">            <span class="string">'80%'</span>:<span class="number">4</span>,</span><br><span class="line">            <span class="string">'60%'</span>:<span class="number">3</span>,</span><br><span class="line">            <span class="string">'40%'</span>:<span class="number">2</span>,</span><br><span class="line">            <span class="string">'20%'</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">'0%'</span>:<span class="number">0</span></span><br><span class="line">        &#125;.get(text)</span><br></pre></td></tr></table></figure><p>【解析】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定位到用户评论元素</span></span><br><span class="line">   infos=response.css(<span class="string">'body &gt; div.newbox &gt; div &gt; div.xgo_cars_w760.l &gt; div.xgo_dianping_infos.mb10 &gt; div.xgo_cars_dianping &gt; div &gt; dl'</span>)</span><br></pre></td></tr></table></figure><p>此句代码定位的元素如下图所示，定位到的是评论页面每条评论的元素整体。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180206/GDkBDcE9A8.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">           uid=info.xpath(<span class="string">'dd[1]/strong/a/text()'</span>)[<span class="number">0</span>].extract() <span class="comment">#获取用户ID</span></span><br><span class="line">           score=info.xpath(<span class="string">'dd[1]/div/div/@style'</span>)[<span class="number">0</span>].extract() <span class="comment">#获取用户评分星级</span></span><br><span class="line">           score=self.getScore(score) <span class="comment">#将用户评分星级转化为5分制评分</span></span><br></pre></td></tr></table></figure><p><code>uid</code>定位到的元素如下图所示，</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180206/3jJH33i5lI.png?imageslim" alt="mark"></p><p><code>score</code>定位到的元素如下图所示，获取<code>score</code>元素的<code>style</code>属性，值形如<code>width:80%</code>，需要通过<code>getScore()</code>方法转换为五分制分数。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180206/1IG8ef6j92.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#先获取是否有‘优点’元素，若有则定位‘优点’元素的下一个兄弟节点，即‘优点评语’，若无则为空</span></span><br><span class="line">node=info.xpath(<span class="string">'dd[2]/div/div[contains(@class,"l redc00")]'</span>)[<span class="number">0</span>] </span><br><span class="line"><span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">merit=node.xpath(<span class="string">'following-sibling::*[1]/text()'</span>)[<span class="number">0</span>].extract()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">merit=<span class="string">''</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">merit=<span class="string">''</span></span><br></pre></td></tr></table></figure><p>先定位是否有<code>优点</code>元素，如下图红框所示，若有该元素，则获取<code>优点</code>元素的下一个兄弟节点内容，如下图蓝框所示，若无则为空。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180206/6Bl97dCa4D.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取`下一页`元素，若有则回调`parse_remark`第三层解析方法，即继续获取下一页用户评论数据</span></span><br><span class="line"><span class="comment">#定位`下一页`元素</span></span><br><span class="line">next_pages=response.css(<span class="string">'body &gt; div.newbox &gt; div &gt; div.xgo_cars_w760.l &gt; div.xgo_dianping_infos.mb10 &gt; div.xgo_cars_dianping &gt; div &gt; div &gt; a.next'</span>)</span><br><span class="line"><span class="keyword">for</span> next_page <span class="keyword">in</span> next_pages:</span><br><span class="line"><span class="comment">#若有`下一页`元素，则拼接`下一页`元素链接，并回调第三层解析方法，用来获取下一页用户评论数据</span></span><br><span class="line"><span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">next_page_link=next_page.xpath(<span class="string">'@href'</span>)[<span class="number">0</span>].extract()</span><br><span class="line">             next_page_link=<span class="string">'http://www.58che.com'</span>+next_page_link</span><br><span class="line">             file=response.meta[<span class="string">'file'</span>]</span><br><span class="line">             <span class="keyword">yield</span> scrapy.Request(url=next_page_link, callback=self.parse_remark, meta=&#123;<span class="string">'file'</span>: file&#125;)</span><br></pre></td></tr></table></figure><p>解析完上述内容，判断用户评论页面是否有分页，定位是否有<code>下一页</code>元素，如下图红框所示，若有则获取该元素链接，如下图橙框所示。</p><p>获取之后，回调<code>parse_remark</code>方法解析下一页的评论页面。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180207/3bDiLjmH2b.png?imageslim" alt="mark"></p><h2 id="编辑pipelines-py文件"><a href="#编辑pipelines-py文件" class="headerlink" title="编辑pipelines.py文件"></a>编辑<code>pipelines.py</code>文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: http://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">baseDir = <span class="string">'/home/t/dataset/carRemark/'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarspiderPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        print(item[<span class="string">'file'</span>])</span><br><span class="line">        <span class="keyword">with</span> codecs.open(baseDir+item[<span class="string">'file'</span>]+<span class="string">'.json'</span>,<span class="string">'a+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            line=json.dumps(dict(item),ensure_ascii=<span class="keyword">False</span>)+<span class="string">'\n'</span></span><br><span class="line">            f.write(line)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><h2 id="编辑settings-py文件"><a href="#编辑settings-py文件" class="headerlink" title="编辑settings.py文件"></a>编辑<code>settings.py</code>文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Scrapy settings for carSpider project</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For simplicity, this file contains only settings considered important or</span></span><br><span class="line"><span class="comment"># commonly used. You can find more settings consulting the documentation:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://doc.scrapy.org/en/latest/topics/settings.html</span></span><br><span class="line"><span class="comment">#     http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line"><span class="comment">#     http://scrapy.readthedocs.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line"></span><br><span class="line">BOT_NAME = <span class="string">'carSpider'</span></span><br><span class="line"></span><br><span class="line">SPIDER_MODULES = [<span class="string">'carSpider.spiders'</span>]</span><br><span class="line">NEWSPIDER_MODULE = <span class="string">'carSpider.spiders'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span></span><br><span class="line"><span class="comment">#USER_AGENT = 'carSpider (+http://www.yourdomain.com)'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Obey robots.txt rules</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class="line"><span class="comment">#CONCURRENT_REQUESTS = 32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/settings.html#download-delay</span></span><br><span class="line"><span class="comment"># See also autothrottle settings and docs</span></span><br><span class="line"><span class="comment">#DOWNLOAD_DELAY = 3</span></span><br><span class="line"><span class="comment"># The download delay setting will honor only one of:</span></span><br><span class="line"><span class="comment">#CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class="line"><span class="comment">#CONCURRENT_REQUESTS_PER_IP = 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable cookies (enabled by default)</span></span><br><span class="line"><span class="comment">#COOKIES_ENABLED = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable Telnet Console (enabled by default)</span></span><br><span class="line"><span class="comment">#TELNETCONSOLE_ENABLED = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Override the default request headers:</span></span><br><span class="line"><span class="comment">#DEFAULT_REQUEST_HEADERS = &#123;</span></span><br><span class="line"><span class="comment">#   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span></span><br><span class="line"><span class="comment">#   'Accept-Language': 'en',</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable or disable spider middlewares</span></span><br><span class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/spider-middleware.html</span></span><br><span class="line"><span class="comment">#SPIDER_MIDDLEWARES = &#123;</span></span><br><span class="line"><span class="comment">#    'carSpider.middlewares.CarspiderSpiderMiddleware': 543,</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable or disable downloader middlewares</span></span><br><span class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html</span></span><br><span class="line"><span class="comment">#DOWNLOADER_MIDDLEWARES = &#123;</span></span><br><span class="line"><span class="comment">#    'carSpider.middlewares.MyCustomDownloaderMiddleware': 543,</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable or disable extensions</span></span><br><span class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/extensions.html</span></span><br><span class="line"><span class="comment">#EXTENSIONS = &#123;</span></span><br><span class="line"><span class="comment">#    'scrapy.extensions.telnet.TelnetConsole': None,</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure item pipelines</span></span><br><span class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'carSpider.pipelines.CarspiderPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class="line"><span class="comment"># See http://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class="line"><span class="comment">#AUTOTHROTTLE_ENABLED = True</span></span><br><span class="line"><span class="comment"># The initial download delay</span></span><br><span class="line"><span class="comment">#AUTOTHROTTLE_START_DELAY = 5</span></span><br><span class="line"><span class="comment"># The maximum download delay to be set in case of high latencies</span></span><br><span class="line"><span class="comment">#AUTOTHROTTLE_MAX_DELAY = 60</span></span><br><span class="line"><span class="comment"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class="line"><span class="comment"># each remote server</span></span><br><span class="line"><span class="comment">#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class="line"><span class="comment"># Enable showing throttling stats for every response received:</span></span><br><span class="line"><span class="comment">#AUTOTHROTTLE_DEBUG = False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class="line"><span class="comment"># See http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class="line">HTTPCACHE_ENABLED = <span class="keyword">False</span></span><br><span class="line"><span class="comment">#HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class="line"><span class="comment">#HTTPCACHE_DIR = 'httpcache'</span></span><br><span class="line"><span class="comment">#HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class="line"><span class="comment">#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span></span><br></pre></td></tr></table></figure><p>【解析】</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>将原来的<code>True</code>改为<code>False</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'carSpider.pipelines.CarspiderPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将原来的注释去掉，即注册pipelines，否则无法使用该pipelines。</p><h2 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h2><p>在项目根目录下新建文件<code>entrypoint.py</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180207/42KlbG9aFe.png?imageslim" alt="mark"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.cmdline <span class="keyword">import</span> execute</span><br><span class="line">execute([<span class="string">'scrapy'</span>,<span class="string">'crawl'</span>,<span class="string">'spider'</span>])</span><br></pre></td></tr></table></figure><h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p><a href="https://github.com/tianwenyu/58CheSpider" target="_blank" rel="external">Github地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04&lt;/li&gt;
&lt;li&gt;Python 3.5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;技术框架&quot;&gt;&lt;a href=&quot;#技术框架&quot; class=&quot;headerlink&quot; title=&quot;技术框架&quot;&gt;&lt;/a&gt;技术框架&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Scrapy&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;需求目标&quot;&gt;&lt;a href=&quot;#需求目标&quot; class=&quot;headerlink&quot; title=&quot;需求目标&quot;&gt;&lt;/a&gt;需求目标&lt;/h2&gt;&lt;p&gt;本项目为汽车口碑分析，第一步需要爬取对于不同车型的评论数据。&lt;/p&gt;
&lt;p&gt;选择&lt;a href=&quot;http://www.58che.com/brand.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;58车&lt;/a&gt;的车型分类爬取评论数据。&lt;/p&gt;
    
    </summary>
    
      <category term="项目" scheme="https://tianwenyu.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="汽车口碑分析" scheme="https://tianwenyu.github.io/tags/%E6%B1%BD%E8%BD%A6%E5%8F%A3%E7%A2%91%E5%88%86%E6%9E%90/"/>
    
      <category term="scrapy" scheme="https://tianwenyu.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>【分布式编程】四——Pycharm运行Python版Spark程序</title>
    <link href="https://tianwenyu.github.io/spark-pycharm/"/>
    <id>https://tianwenyu.github.io/spark-pycharm/</id>
    <published>2018-01-13T12:29:30.000Z</published>
    <updated>2018-01-17T15:12:55.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此前搭建成功分布式Spark环境，此文介绍使用Pycharm运行Python语言的Spark程序。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="安装Pycharm"><a href="#安装Pycharm" class="headerlink" title="安装Pycharm"></a>安装Pycharm</h3><ol><li><p><a href="https://download.jetbrains.8686c.com/python/pycharm-professional-2017.3.2.tar.gz" target="_blank" rel="external">点击下载</a>。</p></li><li><p>过程与<a href="https://tianwenyu.github.io/ubuntu-intellij/">安装Intellij IDEA</a>类似，在此不在赘述。</p></li><li><p>进入到安装目录下执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin pycharm-sh</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h3 id="配置运行环境"><a href="#配置运行环境" class="headerlink" title="配置运行环境"></a>配置运行环境</h3><ol><li><p>创建新项目</p></li><li><p>新建一个Python文件，这里命名为<code>main.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext,SparkConf</span><br><span class="line"></span><br><span class="line">conf=SparkConf().setAppName(<span class="string">"sparkDemo"</span>).setMaster(<span class="string">"local"</span>)</span><br><span class="line">sc=SparkContext(conf=conf)</span><br><span class="line">logFile=<span class="string">'/data/input/README.txt'</span></span><br><span class="line">logData=sc.textFile(logFile).cache()</span><br><span class="line"></span><br><span class="line">numAs = logData.filter(<span class="keyword">lambda</span> s: <span class="string">'a'</span> <span class="keyword">in</span> s).count()</span><br><span class="line">numBs = logData.filter(<span class="keyword">lambda</span> s: <span class="string">'b'</span> <span class="keyword">in</span> s).count()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Lines with a: %i, lines with b: %i"</span> % (numAs, numBs))</span><br></pre></td></tr></table></figure><p><code>logFile=&#39;/data/input/README.txt&#39;</code></p><p>此路径是之前运行Hadoop例程在HDFS中创建的<code>/data/input</code>文件夹以及上传到此文件夹的<code>README.txt</code>文件。</p></li><li><p>将Spark中的pyspark模块添加到Python环境变量中去</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加以下代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$SPARK_HOME</span>/libexec/python:<span class="variable">$SPARK_HOME</span>/libexec/python/build:<span class="variable">$PYTHONPATH</span></span><br></pre></td></tr></table></figure></li><li><p>更新配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>将<code>/usr/spark-2.2.1-bin-without-hadoop/Python/lib/py4j-0.10.4-src.zip</code>解压。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf /usr/spark-2.2.1-bin-without-hadoop/Python/lib/py4j-0.10.4-src.zip</span><br></pre></td></tr></table></figure><p>将解压后的文件夹复制到<code>/usr/spark-2.2.1-bin-without-hadoop/Python</code>文件夹下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv /usr/spark-2.2.1-bin-without-hadoop/Python/lib/py4j /usr/spark-2.2.1-bin-without-hadoop/Python</span><br></pre></td></tr></table></figure><p>【注】</p><ul><li><code>/usr/spark-2.2.1-bin-without-hadoop</code>是spark安装目录。</li><li><code>py4j-0.10-4-src.zip</code>根据版本号不同，文件名称也有差异</li></ul></li><li><p>点击<code>Run-Edit Configurations</code></p><p>点击左上角绿色<code>+</code>，选择<code>Python</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180116/cHdc249k76.png?imageslim" alt="mark"></p><p>填写配置</p><ul><li><p><code>Name</code>：任起一个名字即可</p></li><li><p><code>Script path</code>：执行的Python文件的路径。可以点右侧的下图中红框选择文件路径。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180116/JdAk0mAFIf.png?imageslim" alt="mark"></p></li><li><p><code>Environment variables</code>：添加<code>PYTHONPATH</code>和<code>SPARK_HOME</code>变量。</p><p><code>PYTHONPATH</code>：<code>spark安装目录/python</code></p><p><code>SPARK_HOME</code>：<code>spark安装目录</code></p></li></ul></li><li><p>点击<code>File-Settings-Project-Project Structure</code></p><p>点击右侧<code>Add Content Root</code></p><p>添加<code>/usr/spark-2.2.1-bin-without-hadoop/Python/lib/py4j-0.10.4-src.zip</code>和<code>/usr/spark-2.2.1-bin-without-hadoop/Python/lib/pyspark.zip</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180117/f9A9bFieH4.png?imageslim" alt="mark"></p></li><li><p>运行即可</p></li></ol><p>【注】若<code>from pyspark import SparkContext,SparkConf</code>下还有红线，则添加以下代码即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.insert(<span class="number">1</span>,<span class="string">'/usr/spark-2.2.1-bin-without-hadoop/python'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;此前搭建成功分布式Spark环境，此文介绍使用Pycharm运行Python语言的Spark程序。&lt;/p&gt;
&lt;h2 id=&quot;操作步骤&quot;&gt;&lt;a href=&quot;#操作步骤&quot; class=&quot;headerlink&quot; title=&quot;操作步骤&quot;&gt;&lt;/a&gt;操作步骤&lt;/h2&gt;&lt;h3 id=&quot;安装Pycharm&quot;&gt;&lt;a href=&quot;#安装Pycharm&quot; class=&quot;headerlink&quot; title=&quot;安装Pycharm&quot;&gt;&lt;/a&gt;安装Pycharm&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://download.jetbrains.8686c.com/python/pycharm-professional-2017.3.2.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击下载&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;过程与&lt;a href=&quot;https://tianwenyu.github.io/ubuntu-intellij/&quot;&gt;安装Intellij IDEA&lt;/a&gt;类似，在此不在赘述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进入到安装目录下执行&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./bin pycharm-sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Spark" scheme="https://tianwenyu.github.io/categories/Spark/"/>
    
    
      <category term="Python" scheme="https://tianwenyu.github.io/tags/Python/"/>
    
      <category term="Spark" scheme="https://tianwenyu.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>【分布式编程】三——基于VirtualBox的Spark完全分布式环境</title>
    <link href="https://tianwenyu.github.io/virtualbox-spark/"/>
    <id>https://tianwenyu.github.io/virtualbox-spark/</id>
    <published>2018-01-13T02:29:30.000Z</published>
    <updated>2018-01-22T13:57:15.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spark的搭建依赖于Hadoop，因此本文基于之前<a href="https://tianwenyu.github.io/virtualbox-haddop/">分布式Hadoop环境</a>，JDK、Hadoop等已安装好，</p><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ul><li>虚拟机：VirtualBox</li><li>Linux：Ubuntu 16.04 LTS</li><li>HAdoop 2.7.5</li><li>IDE：Intellij IDEA</li><li>JDK 1.8.0_151</li><li>Scala-2.12.4</li><li>Spark-2.2.1</li></ul><a id="more"></a><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="安装Scala"><a href="#安装Scala" class="headerlink" title="安装Scala"></a>安装Scala</h3><ol><li><p>下载<a href="https://downloads.lightbend.com/scala/2.12.4/scala-2.12.4.tgz" target="_blank" rel="external">Scala-2.12.4</a></p></li><li><p>解压到当前目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf scala-2.12.4.tgz</span><br></pre></td></tr></table></figure></li><li><p>将解压后的文件夹移动到<code>/usr</code>下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv scala-2.12.4/ /usr/</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加如下代码，路径根据情况自己修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SCALA_HOME=/usr/scala-2.12.4</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$SCALA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li><li><p>更新环境变量配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>验证是否安装成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scala -version</span><br></pre></td></tr></table></figure><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180115/e6k62ke67K.png?imageslim" alt=""></p></li></ol><h3 id="安装Spark"><a href="#安装Spark" class="headerlink" title="安装Spark"></a>安装Spark</h3><ol><li><p>下载<a href="http://spark.apache.org/downloads.html" target="_blank" rel="external">Spark</a>，由于Spark基于Hadoop，且之前已经安装好Hadoop，所以下载没有绑定Hadoop的版本，所以选择<a href="http://mirrors.hust.edu.cn/apache/spark/spark-2.2.1/spark-2.2.1-bin-without-hadoop.tgz" target="_blank" rel="external">spark-2.2.1-bin-without-hadoop.tgz</a></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180115/JBJiB7BK7A.png?imageslim" alt="mark"></p></li><li><p>解压到当前目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf spark-2.2.1-bin-without-hadoop.tgz</span><br></pre></td></tr></table></figure></li><li><p>将解压后的文件夹移动到<code>/usr/local/</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv spark-2.2.1-bin-without-hadoop/ /usr/</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>添加以下代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SPARK_HOME=/usr/spark-2.2.1-bin-without-hadoop</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$SPARK_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$SPARK_HOME</span>/sbin</span><br></pre></td></tr></table></figure></li><li><p>更新环境变量配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li></ol><h3 id="Spark配置"><a href="#Spark配置" class="headerlink" title="Spark配置"></a>Spark配置</h3><p>【注】此处以<code>master</code>主机为例，其他从机作相应更改</p><h4 id="配置spark-env-sh"><a href="#配置spark-env-sh" class="headerlink" title="配置spark-env.sh"></a>配置<code>spark-env.sh</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/spark-2.2.1-bin-without-hadoop/conf/</span><br><span class="line">sudo cp spark-env.sh.template spark-env.sh</span><br><span class="line">sudo vim spark-env.sh</span><br></pre></td></tr></table></figure><p>添加以下代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SPARK_HOME=/usr/spark-2.2.1-bin-without-hadoop</span><br><span class="line"><span class="built_in">export</span> SPARK_DIST_CLASSPATH=$(/usr/hadoop-2.7.5/bin/hadoop classpath)</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/jdk1.8.0_151</span><br><span class="line"><span class="built_in">export</span> SCALA_HOME=/usr/scala-2.12.4</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/hadoop-2.7.5</span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=/usr/hadoop-2.7.5/etc/hadoop</span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_IP=master</span><br><span class="line"><span class="built_in">export</span> SPARK_MASTER_HOST=master</span><br><span class="line"><span class="built_in">export</span> SPARK_LOCAL_IP=master</span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_MEMEORY=1g</span><br><span class="line"><span class="built_in">export</span> SPARK_EXECUTOR_MEMEORY=1g</span><br><span class="line"><span class="built_in">export</span> SPARK_DRIVER_MEMORY=1g</span><br><span class="line"><span class="built_in">export</span> SPARK_WORKER_CORES=1</span><br></pre></td></tr></table></figure><p>【注】</p><ul><li><code>SPARK_LOCAL_IP</code>为本地地址，从机需要更改为自己的IP</li></ul><h4 id="配置slaves"><a href="#配置slaves" class="headerlink" title="配置slaves"></a>配置<code>slaves</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp slaves.template slaves</span><br><span class="line">sudo vim slaves</span><br></pre></td></tr></table></figure><p>添加所有从机的主机名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node1</span><br><span class="line">node2</span><br></pre></td></tr></table></figure><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><p>因为Spark基于Hadoop，所以需要先启动Hadoop。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p>再启动Spark，进入到Spark安装目录下的<code>sbin</code>文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/spark-2.2.1-bin-without-hadoop/sbin</span><br></pre></td></tr></table></figure><p>执行<code>sbin</code>文件夹下的<code>start-all.sh</code>，若直接执行<code>start-all.sh</code>，启动的是Hadoop</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./start-all.sh</span><br></pre></td></tr></table></figure><h3 id="查看集群"><a href="#查看集群" class="headerlink" title="查看集群"></a>查看集群</h3><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><p>主机上显示以下进程</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180116/laek5CEcGf.png?imageslim" alt="mark"></p><p>从机显示以下进程</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180116/8ab821igFG.png?imageslim" alt="mark"></p><h4 id="通过Web查看状态"><a href="#通过Web查看状态" class="headerlink" title="通过Web查看状态"></a>通过Web查看状态</h4><p>在主机<code>master</code>上打开浏览器，访问<code>http://localhost:8080</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180116/4igD0E0HI2.png?imageslim" alt="mark"></p><h4 id="运行pyspark"><a href="#运行pyspark" class="headerlink" title="运行pyspark"></a>运行pyspark</h4><p>进入到spark安装目录下的<code>bin</code>文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/spark-2.2.1-bin-without-hadoop/bin/</span><br></pre></td></tr></table></figure><p>运行<code>pyspark</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./pyspark</span><br></pre></td></tr></table></figure><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180116/4kfiDg4IfL.png?imageslim" alt="mark"></p><h4 id="运行spark-shell"><a href="#运行spark-shell" class="headerlink" title="运行spark-shell"></a>运行spark-shell</h4><p>进入到spark安装目录下的<code>bin</code>文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/spark-2.2.1-bin-without-hadoop/bin/</span><br></pre></td></tr></table></figure><p>运行<code>spark-shell</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sparkshell</span><br></pre></td></tr></table></figure><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180116/9DKJiIi12F.png?imageslim" alt="mark"></p><p>以上，证明spark配置成功。</p><h3 id="关闭集群"><a href="#关闭集群" class="headerlink" title="关闭集群"></a>关闭集群</h3><p>同样进入到Spark安装目录下的<code>sbin</code>文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/spark-2.2.1-bin-without-hadoop/sbin</span><br><span class="line">./stop-all.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Spark的搭建依赖于Hadoop，因此本文基于之前&lt;a href=&quot;https://tianwenyu.github.io/virtualbox-haddop/&quot;&gt;分布式Hadoop环境&lt;/a&gt;，JDK、Hadoop等已安装好，&lt;/p&gt;
&lt;h2 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;虚拟机：VirtualBox&lt;/li&gt;
&lt;li&gt;Linux：Ubuntu 16.04 LTS&lt;/li&gt;
&lt;li&gt;HAdoop 2.7.5&lt;/li&gt;
&lt;li&gt;IDE：Intellij IDEA&lt;/li&gt;
&lt;li&gt;JDK 1.8.0_151&lt;/li&gt;
&lt;li&gt;Scala-2.12.4&lt;/li&gt;
&lt;li&gt;Spark-2.2.1&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Spark" scheme="https://tianwenyu.github.io/categories/Spark/"/>
    
    
      <category term="VirtualBox" scheme="https://tianwenyu.github.io/tags/VirtualBox/"/>
    
      <category term="Spark" scheme="https://tianwenyu.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>【分布式编程】二——基于Hadoop的MapReduce程序</title>
    <link href="https://tianwenyu.github.io/hadoop-wordcount/"/>
    <id>https://tianwenyu.github.io/hadoop-wordcount/</id>
    <published>2018-01-12T12:29:30.000Z</published>
    <updated>2018-01-14T06:43:59.818Z</updated>
    
    <content type="html"><![CDATA[<p>此前配置好<a href="https://tianwenyu.github.io/virtualbox-haddop/">分布式Hadoop环境</a>，此篇主要讲解通过Intellij IDEA编写分布式MapReduce程序以及利用Hadoop实现词频统计</p><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ul><li>虚拟机：VirtualBox</li><li>Linux：Ubuntu 16.04 LTS</li><li>Hadoop 2.7.5</li><li>IDE：Intellij IDEA </li><li>JDK 1.8.0_151<a id="more"></a><h2 id="安装Intellij及破解"><a href="#安装Intellij及破解" class="headerlink" title="安装Intellij及破解"></a>安装Intellij及破解</h2></li></ul><p><a href="https://tianwenyu.github.io/ubuntu-intellij/">安装Intellij IDEA</a></p><p><a href="https://tianwenyu.github.io/Idea2017-license/">破解Intellij IDEA</a></p><h2 id="创建Hadoop工程"><a href="#创建Hadoop工程" class="headerlink" title="创建Hadoop工程"></a>创建Hadoop工程</h2><h3 id="创建新工程"><a href="#创建新工程" class="headerlink" title="创建新工程"></a>创建新工程</h3><ol><li><p>打开Intellij IDEA，创建一个新工程</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180112/FmL2jD01aF.png?imageslim" alt="mark"></p></li><li><p>选择Java项目，并添加JDK路径</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180112/iCAcgIIj3b.png?imageslim" alt="mark"></p></li></ol><h3 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h3><p>点击<code>File-Project Structure</code></p><p>打开后点击左侧<code>Modules</code>，然后点击<code>Dependencies</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180114/5J0ked69Bk.png?imageslim" alt="mark"></p><p>点击右侧<code>+</code>，选择<code>JARs or directories</code>，将下图所有依赖包的目录导入</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180114/7Al8HAmi0G.png?imageslim" alt="mark"></p><p>【注】<code>/usr/hadoop-2.7.5</code>是Hadoop安装目录</p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>新建一个类名为<code>WordCount</code>，代码如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenizerMapper</span></span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(value.toString());</span><br><span class="line">            <span class="keyword">while</span> (itr.hasMoreTokens()) &#123;</span><br><span class="line">                word.set(itr.nextToken());</span><br><span class="line">                context.write(word, one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSumReducer</span></span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">IntWritable</span>,<span class="title">Text</span>,<span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Context context</span></span></span><br><span class="line"><span class="function"><span class="params">        )</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">                sum += val.get();</span><br><span class="line">            &#125;</span><br><span class="line">            result.set(sum);</span><br><span class="line">            context.write(key, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        Job job = Job.getInstance(conf, <span class="string">"word count"</span>);</span><br><span class="line">        job.setJarByClass(WordCount.class);</span><br><span class="line">        job.setMapperClass(TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置编译环境"><a href="#配置编译环境" class="headerlink" title="配置编译环境"></a>配置编译环境</h3><p>点击<code>Run-Edit Configuration</code></p><p>点击左上角<code>+</code>，然后点击<code>Application</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180114/0Ee3j1CIaF.png?imageslim" alt="mark"></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180114/cdaF1d4HKb.png?imageslim" alt="mark"></p><ul><li><p><code>Name</code>，即该运行配置的名字，这里命名为<code>RunHadoop</code></p></li><li><p><code>Main Class</code>，即需要运行的主类，这里使用的默认包，所以填写<code>WordCount</code></p></li><li><p><code>Program arguments</code>，即运行时需要输入的参数，此处填写参数为<code>hdfs://master:9000/data/input/README.txt hdfs://master:9000/output/</code></p><p>此处，第一个参数为输入文件路径，第二个参数为输出文件路径。</p><p><code>master:9000</code>为<a href="https://tianwenyu.github.io/virtualbox-haddop/">分布式Hadoop环境</a>中<code>core-site.xml</code>配置文件中<code>fs.default.name</code>的值</p><p><code>/data/input/README.txt</code>为<a href="https://tianwenyu.github.io/virtualbox-haddop/">分布式Hadoop环境</a>中利用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir -p /data/input</span><br><span class="line">hdfs dfs -put README.txt /data/input</span><br></pre></td></tr></table></figure><p>创建并上传到HDFS系统中的文件路径。</p></li></ul><p>【注】若<code>hdfs://master:9000/output</code>已经存在，需要手动删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs dfs -rm -r /output</span><br></pre></td></tr></table></figure><h3 id="查看运行结果"><a href="#查看运行结果" class="headerlink" title="查看运行结果"></a>查看运行结果</h3><h4 id="web界面查看"><a href="#web界面查看" class="headerlink" title="web界面查看"></a>web界面查看</h4><p>通过<code>http://localhost:50070</code>查看各个结点运行状况</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180114/0jfAihfLm7.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此前配置好&lt;a href=&quot;https://tianwenyu.github.io/virtualbox-haddop/&quot;&gt;分布式Hadoop环境&lt;/a&gt;，此篇主要讲解通过Intellij IDEA编写分布式MapReduce程序以及利用Hadoop实现词频统计&lt;/p&gt;
&lt;h2 id=&quot;系统环境&quot;&gt;&lt;a href=&quot;#系统环境&quot; class=&quot;headerlink&quot; title=&quot;系统环境&quot;&gt;&lt;/a&gt;系统环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;虚拟机：VirtualBox&lt;/li&gt;
&lt;li&gt;Linux：Ubuntu 16.04 LTS&lt;/li&gt;
&lt;li&gt;Hadoop 2.7.5&lt;/li&gt;
&lt;li&gt;IDE：Intellij IDEA &lt;/li&gt;
&lt;li&gt;JDK 1.8.0_151
    
    </summary>
    
      <category term="Hadoop" scheme="https://tianwenyu.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="https://tianwenyu.github.io/tags/Hadoop/"/>
    
      <category term="文本分类" scheme="https://tianwenyu.github.io/tags/%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>【分布式编程】一——基于VirtualBox的Hadoop完全分布式环境搭建</title>
    <link href="https://tianwenyu.github.io/virtualbox-haddop/"/>
    <id>https://tianwenyu.github.io/virtualbox-haddop/</id>
    <published>2018-01-02T12:29:30.000Z</published>
    <updated>2018-01-22T13:57:17.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><ul><li><p>虚拟机环境：VirtualBox</p></li><li><p>Linux系统：Ubuntu 16.04 LTS</p></li><li><p>工具包</p><ul><li>JDK1.8</li><li>Hadoop 2.7.5<a id="more"></a></li></ul></li><li><p>拓扑结构：如下</p><p><img src="http://images.cnitblog.com/blog/352072/201311/13134833-69706f5f43ef4920861cab670e300b47.jpg" alt=""></p></li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>【注】本步骤以<code>Master</code>为例，其他虚拟机可以使用<code>克隆</code>功能复制，然后更改</p><h3 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h3><h4 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装<code>vim</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><h3 id="安装工具包"><a href="#安装工具包" class="headerlink" title="安装工具包"></a>安装工具包</h3><h4 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h4><ol><li>安装<code>VirtualBox增强功能包</code>,<code>Ubuntu</code>系统直接点击<code>设备-&gt;安装增强功能</code></li><li>剩余步骤看<a href="https://tianwenyu.github.io/linux-share-dir/">教程</a></li></ol><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><ol><li>下载<a href="http://211.137.51.152/cache/download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.tar.gz?ich_args2=98-04210010008329_333dd91cf13b7e9782d179c9dd330695_10001002_9c896529d7c4f1d99738518939a83798_bd613938abecfa80360462399ee84888" target="_blank" rel="external">JDK-8u151</a></li><li>剩余步骤看<a href="https://tianwenyu.github.io/ubuntu-jdk8/">教程</a></li></ol><h3 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h3><h4 id="创建用户组-1"><a href="#创建用户组-1" class="headerlink" title="创建用户组"></a>创建用户组</h4><p>每个主机都需要加入到同一用户组。此处创建名为<code>hadoop</code>用户组</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo addgroup hadoop</span><br></pre></td></tr></table></figure><h4 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">who</span><br></pre></td></tr></table></figure><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180105/45iAIB0AEA.png?imageslim" alt="mark"></p><p>当前用户为<code>t</code></p><h4 id="添加当前用户到用户组"><a href="#添加当前用户到用户组" class="headerlink" title="添加当前用户到用户组"></a>添加当前用户到用户组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo adduser t hadoop <span class="comment">#sudo adduser user group</span></span><br></pre></td></tr></table></figure><h4 id="查看归属用户组"><a href="#查看归属用户组" class="headerlink" title="查看归属用户组"></a>查看归属用户组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groups t <span class="comment">#group user</span></span><br></pre></td></tr></table></figure><h3 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h3><h4 id="下载Hadoop"><a href="#下载Hadoop" class="headerlink" title="下载Hadoop"></a>下载Hadoop</h4><p>点击<a href="http://mirrors.hust.edu.cn/apache/hadoop/common/hadoop-2.7.5/hadoop-2.7.5.tar.gz" target="_blank" rel="external">链接</a>下载</p><h4 id="解压Hadoop"><a href="#解压Hadoop" class="headerlink" title="解压Hadoop"></a>解压Hadoop</h4><p>将文件复制到<code>/Downloads/</code>文件夹下进行解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Downloads/</span><br><span class="line">tar -zxvf hadoop-2.7.5.tar.gz</span><br></pre></td></tr></table></figure><p>将解压后的文件夹移动到<code>/usr/</code>文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv hadoop-2.7.5/ /usr/</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>需要配置的文件都在解压后的<code>hadoop-2.7.5</code>即<code>usr/hadoop-2.7.5/</code>文件夹中的<code>/etc/hadoop/</code>文件夹中</p><h5 id="配置hadoop-env-sh"><a href="#配置hadoop-env-sh" class="headerlink" title="配置hadoop-env.sh"></a>配置<code>hadoop-env.sh</code></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/hadoop-2.7.5/etc/hadoop/</span><br><span class="line">sudo vim hadoop-env.sh</span><br></pre></td></tr></table></figure><p>添加java安装路径</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180106/Bdki4Ke011.png?imageslim" alt="mark"></p><h5 id="配置core-site-xml"><a href="#配置core-site-xml" class="headerlink" title="配置core-site.xml"></a>配置<code>core-site.xml</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">final</span>&gt;</span>true<span class="tag">&lt;/<span class="name">final</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/t/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>A base for other temporary   directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【说明】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此参数设置<code>NameNode</code>的URI，此处设<code>master</code>主机为<code>NameNode</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此参数设置Hadoop的一个临时目录，用来存放每次运行的作业jpb的信息。</p><p>此处设置<code>/home/t/hadoop/tmp</code>为临时目录，因没有此目录，因此需要先创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir /home/t/hadoop/tmp</span><br></pre></td></tr></table></figure><p>【附】</p><p>其他部分参数，如需要更多参数，请自查</p><table><thead><tr><th>参数</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>fs.default.name</td><td>file:///</td><td>NameNode的URI</td></tr><tr><td>hadoop.tmp.dir</td><td></td><td>临时目录位置</td></tr><tr><td>hadoop.native.lib</td><td>true</td><td>是否使用hadoop的本地库</td></tr><tr><td>hadoop.http.filter.initializers</td><td>空</td><td>设置Filter初始器</td></tr></tbody></table><h5 id="配置hdfs-site-xml"><a href="#配置hdfs-site-xml" class="headerlink" title="配置hdfs-site.xml"></a>配置<code>hdfs-site.xml</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/t/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">final</span>&gt;</span>true<span class="tag">&lt;/<span class="name">final</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">              <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/t/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">final</span>&gt;</span>true<span class="tag">&lt;/<span class="name">final</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">               <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">                 <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">                  <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【说明】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>dfs.name.dir</code>存储永久性的元数据的目录列表。这个目录会创建在<code>master</code>主机上。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>dfs.data.dir</code>存放数据块的目录列表，这个目录在<code>node1</code>和<code>node2</code>上创建</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>dfs.replication</code>设置文件副本数,此处有两个从机，设置副本数为2</p><h5 id="配置mapred-site-xml"><a href="#配置mapred-site-xml" class="headerlink" title="配置mapred-site.xml"></a>配置<code>mapred-site.xml</code></h5><p>先创建<code>mapred-site.xml</code>，进入到<code>~/etc/hadoop/</code>文件夹下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span>&gt;</span>                                                               </span><br><span class="line">　　　　　　　　<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9001<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置slaves"><a href="#配置slaves" class="headerlink" title="配置slaves"></a>配置<code>slaves</code></h5><p>把其他从机的主机名添加，有几个就添加几个，多添加会无法运行</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180106/0E8A9haeKc.png?imageslim" alt="mark"></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>将环境变量添加即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/hadoop-2.7.5</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>更新生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>运行是否配置环境变量成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180106/d33m83gH4c.png?imageslim" alt="mark"></p><p>【注】此步骤完成之后，可以克隆两个虚拟机分别命名为<code>node1</code>,<code>node2</code></p><h3 id="更改网络配置"><a href="#更改网络配置" class="headerlink" title="更改网络配置"></a>更改网络配置</h3><h4 id="虚拟机设置"><a href="#虚拟机设置" class="headerlink" title="虚拟机设置"></a>虚拟机设置</h4><p>【注】所有虚拟机都需要进行此步操作</p><p>点击<code>控制-&gt;设置-&gt;网络</code>，连接方式选择<code>桥接网卡</code>，然后重启虚拟机</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180105/k7DhdFD55d.png?imageslim" alt="mark"></p><h4 id="修改Hostname"><a href="#修改Hostname" class="headerlink" title="修改Hostname"></a>修改<code>Hostname</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hostname</span><br></pre></td></tr></table></figure><p>【注】其他虚拟机修改其<code>Hostname</code>为相应的名称</p><p>以<code>master</code>为例，直接改为</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180105/Am7I9dldGl.png?imageslim" alt="mark"></p><h4 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改<code>hosts</code>文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><p>增加以下内容，所有虚拟机都要增加以下内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.10.11.191 master</span><br><span class="line">10.10.11.192 node1</span><br><span class="line">10.10.11.193 node2</span><br></pre></td></tr></table></figure><p>其中<code>127.0.0.1    oldhostname</code>删掉</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180115/Flg9kKlDdg.png?imageslim" alt="mark"></p><h4 id="更改IP地址、网关"><a href="#更改IP地址、网关" class="headerlink" title="更改IP地址、网关"></a>更改IP地址、网关</h4><p>【注】此处以<code>master</code>主机为例，其他主机根据上述拓扑图做相应更改</p><p>1.更改IP</p><p>利用<code>ifconfig</code>命令查看网卡名称，然后更改设置，本虚拟机网卡为<code>enp0s3</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ifconfig  enp0s3 10.10.11.191/24</span><br></pre></td></tr></table></figure><p>【注】此种更改IP的方法，系统重启后需要重新配置</p><p>2.更改网关</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo route add default gw 10.10.11.1</span><br></pre></td></tr></table></figure><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br><span class="line">sudo apt-get remove iptables</span><br></pre></td></tr></table></figure><p>【注】此步骤后即可利用<code>VirtualBox</code>克隆功能复制出其他从机</p><h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><p>使用<code>ping</code>命令测试是否能够连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping hostname</span><br></pre></td></tr></table></figure><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><h4 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a>安装ssh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ssh</span><br></pre></td></tr></table></figure><h4 id="查看已安装的ssh"><a href="#查看已安装的ssh" class="headerlink" title="查看已安装的ssh"></a>查看已安装的ssh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg --list|grep ssh</span><br></pre></td></tr></table></figure><p>如果缺少<code>openssh-server</code>，需要安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><h4 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h4><p>下述步骤在不同的主机上进行，请注意区分</p><h5 id="master机操作"><a href="#master机操作" class="headerlink" title="master机操作"></a><code>master</code>机操作</h5><ol><li><p>生成<code>master</code>机的一对公钥和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -P <span class="string">''</span></span><br></pre></td></tr></table></figure></li><li><p>进入<code>.ssh</code>目录查看公钥和私钥，<code>id_rsa</code>和<code>id_rsa.pub</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure></li><li><p>将公钥加入到已认证的key中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>登录本机</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh localhost</span><br></pre></td></tr></table></figure></li></ol><p>如果出现<code>The authenticity of host &#39;localhost (127.0.0.1)&#39; can&#39;t be established.</code>，输入<code>yes</code>即可。</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180106/Ak4cdCc3Kb.png?imageslim" alt="mark"></p><h5 id="其他从机操作"><a href="#其他从机操作" class="headerlink" title="其他从机操作"></a>其他从机操作</h5><ol><li>将<code>master</code>主机上的<code>id_rsa.pub</code>复制到<code>node1</code>从机上。同理<code>node2</code>进行类似操作</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub t@node1:~/</span><br></pre></td></tr></table></figure><p>然后再在从机执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>若遇到<code>/home/t/.ssh/node1_rsa.pub: No such file or directory</code>，则手动通过共享文件夹复制到其他从机相应位置。</p><p>若从机<code>cd .ssh</code>遇到<code>No such file or directory</code>，则手工创建<code>.ssh</code>文件夹。</p><ul><li>在<code>/home/t</code>图形化界面按<code>Ctrl+H</code>显示隐藏文件夹，</li><li>若已经存在<code>.ssh</code>文件夹，则删除<code>suso rm -r /home/t/.ssh</code>。这里的<code>/home/t</code>是用户目录，<code>t</code>是用户名，其他用户名则需要做相应更改。</li><li>若没有<code>.ssh</code>文件夹，则创建<code>sudo mkdir /home/t/.ssh</code></li><li>更改权限<code>sudo chmod a+w /home/t/.ssh</code></li><li>通过共享文件夹把<code>master</code>中的<code>id_rsa.pub</code>复制到<code>/home/t/</code>中</li></ul><ol><li><p>将<code>master</code>主机上的密钥加入到认证中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>在<code>master</code>主机上验证能否正常登陆</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh node1</span><br></pre></td></tr></table></figure></li></ol><p>出现以下则表示登陆成功</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180107/Cmaj7d6h9m.png?imageslim" alt="mark"></p><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><h4 id="格式化namenode"><a href="#格式化namenode" class="headerlink" title="格式化namenode"></a>格式化<code>namenode</code></h4><p>在主机<code>master</code>运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop namenode -format</span><br></pre></td></tr></table></figure><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180106/0JG2119BIL.png?imageslim" alt="mark"></p><p>若出现<code>has been successfully formatted</code>和<code>Exiting with status 0</code>表示格式化成功</p><p>若出现<code>hadoop:Cannot create directory /home/t/hadoop/name/current</code>错误即文件夹权限不足</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod -R a+w /home/t/hadoop/name/current</span><br></pre></td></tr></table></figure><h4 id="启动集群-1"><a href="#启动集群-1" class="headerlink" title="启动集群"></a>启动集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start-all.sh</span><br></pre></td></tr></table></figure><p>启动完毕后，执行命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure><p>若<code>master</code>主机看到四个开启的进程代表启动成功</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180107/D9LHidejII.png?imageslim" alt="mark"></p><p>若从机上看到启动进程</p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180111/H0K6e8lcAA.png?imageslim" alt="mark"></p><p>【问题解释】<a href="https://www.cnblogs.com/dream-to-pku/p/7249954.html" target="_blank" rel="external">为什么没有<code>jobtracker</code>和<code>tasktracker</code></a></p><h4 id="停止集群"><a href="#停止集群" class="headerlink" title="停止集群"></a>停止集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stop-all.sh</span><br></pre></td></tr></table></figure><h4 id="查看运行状态"><a href="#查看运行状态" class="headerlink" title="查看运行状态"></a>查看运行状态</h4><h5 id="查看Namenode状况"><a href="#查看Namenode状况" class="headerlink" title="查看Namenode状况"></a>查看<code>Namenode</code>状况</h5><p>通过Web界面查看<code>NameNode</code>运行状况，默认为<code>http://localhost:50070</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180112/A57l3cd9Kh.png?imageslim" alt="mark"></p><h5 id="查看ResourceManager状况"><a href="#查看ResourceManager状况" class="headerlink" title="查看ResourceManager状况"></a>查看<code>ResourceManager</code>状况</h5><p><code>http://localhost:8088</code></p><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180112/JgjE12CA4f.png?imageslim" alt="mark"></p><h3 id="运行测试程序"><a href="#运行测试程序" class="headerlink" title="运行测试程序"></a>运行测试程序</h3><p>向hadoop集群系统提交第一个mapreduce任务，统计词频</p><ol><li><p>进入本地hadoop目录.此处是<code>/usr/hadoop-2.7.5</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/hadoop-2.7.5</span><br></pre></td></tr></table></figure></li><li><p>在虚拟分布式文件系统上创建一个目录<code>/data/input</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs dfs -mkdir -p /data/input</span><br></pre></td></tr></table></figure></li><li><p>将当前目录下的<code>README.txt</code>复制到虚拟分布式文件系统中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs dfs -put README.txt /data/input</span><br></pre></td></tr></table></figure></li><li><p>查看虚拟分布式文件系统中是否有复制上去的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs dfs -ls /data/input</span><br></pre></td></tr></table></figure></li><li><p>向Hadoop提交单词统计任务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.5.jar wordcount /data/input /data/output/result</span><br></pre></td></tr></table></figure></li><li><p>查看结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdfs dfs -cat /data/output/result/part-r-00000</span><br></pre></td></tr></table></figure></li></ol><p><img src="http://p15qizl76.bkt.clouddn.com/blog/180112/6EJGHl8D37.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;系统架构&quot;&gt;&lt;a href=&quot;#系统架构&quot; class=&quot;headerlink&quot; title=&quot;系统架构&quot;&gt;&lt;/a&gt;系统架构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;虚拟机环境：VirtualBox&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linux系统：Ubuntu 16.04 LTS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工具包&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDK1.8&lt;/li&gt;
&lt;li&gt;Hadoop 2.7.5
    
    </summary>
    
      <category term="Hadoop" scheme="https://tianwenyu.github.io/categories/Hadoop/"/>
    
    
      <category term="VirtualBox" scheme="https://tianwenyu.github.io/tags/VirtualBox/"/>
    
      <category term="Hadoop" scheme="https://tianwenyu.github.io/tags/Hadoop/"/>
    
  </entry>
  
</feed>
